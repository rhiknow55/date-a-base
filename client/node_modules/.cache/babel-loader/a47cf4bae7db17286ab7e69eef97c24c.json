{"ast":null,"code":"var _jsxFileName = \"/Users/Rhino/date-a-base/client/src/Profile.js\";\nimport React, { Component } from 'react';\nimport \"./Profile.css\";\nimport ElectricBass from './images/electricBass.png';\nimport ChemicalBase from './images/chemicalBase.png';\nimport Baseball from './images/baseball.png';\nimport Trophy from \"./Trophy.js\";\nimport Post from \"./Post\";\nimport { NavItem } from \"react-bootstrap\";\nimport { LinkContainer } from \"react-router-bootstrap\";\n\nclass Profile extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      trophyIds: [],\n      hasAllTrophies: false\n    };\n\n    this.retrieveTrophy = async () => {\n      // console.log('get api is called');\n      // console.log(\"user id: \" + this.props.myUserId);\n      let url = '/get_trophies?userId=' + this.props.myUserId;\n      const response = await fetch(url);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      console.log(json);\n      return json;\n    };\n\n    this.renderTrofiess = () => {\n      let trophies = []; // Add the trophies\n\n      let trophyIds = this.state.trophyIds;\n\n      for (let i = 0; i < trophyIds.length; ++i) {\n        trophies.push(React.createElement(Trophy, {\n          trophyId: trophyIds[i].trophyId,\n          myUserId: this.props.myUserId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }));\n      }\n\n      return trophies;\n    };\n\n    this.hasAllTrophies = async () => {\n      console.log('hasAllTrophies is called');\n      console.log(\"user id: \" + this.props.myUserId);\n      let url = '/has_all_trophies';\n      const response = await fetch(url);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      console.log(json);\n      return json;\n    };\n\n    this.renderHasAllTrofies = () => {\n      let hasAllTrophies = this.state.hasAllTrophies;\n      console.log(hasAllTrophies);\n\n      if (hasAllTrophies) {\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, \"you have all the trophies!\");\n      }\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"call componentDidMount\"); // Load the trophies\n\n    this.retrieveTrophy().then(res => {\n      console.log(res.trophyIds);\n      console.log(typeof res.trophyIds);\n      this.setState({\n        trophyIds: res.trophyIds\n      });\n    });\n    this.hasAllTrophies().then(res => {\n      console.log('get all user ids that has all trophies');\n      console.log(res.userIds);\n      console.log(typeof res.userIds);\n      console.log(this.props.myUserId);\n      console.log(res.userIds[1].userId);\n      let allTrophiesUserIds = res.userIds;\n\n      for (let i = 0; i < allTrophiesUserIds.length; i++) {\n        if (this.props.myUserId == allTrophiesUserIds[i].userId) {\n          console.log('you have all the trophies!');\n          this.setState({\n            hasAllTrophies: true\n          });\n        }\n      }\n\n      console.log(this.state.hasAllTrophies);\n    });\n  }\n\n  renderBaseLogo(baseId) {\n    switch (baseId) {\n      case 1:\n        return React.createElement(\"img\", {\n          src: ElectricBass,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        });\n\n      case 2:\n        return React.createElement(\"img\", {\n          src: ChemicalBase,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        });\n\n      case 3:\n        return React.createElement(\"img\", {\n          src: Baseball,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        });\n\n      case 4:\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }, \"Log base\");\n\n      case 5:\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, \"Bass Fish\");\n        ;\n\n      default:\n        return null;\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Profile-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"User Profile Here\"), this.renderBaseLogo(this.props.baseId), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"BaseId: \", this.props.baseId), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Username: \", this.props.username), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Horoscope: \", this.props.horoscope), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Points: \", this.props.log), this.renderHasAllTrofies(), this.renderTrofiess());\n  }\n\n}\n\nexport default Profile;","map":{"version":3,"sources":["/Users/Rhino/date-a-base/client/src/Profile.js"],"names":["React","Component","ElectricBass","ChemicalBase","Baseball","Trophy","Post","NavItem","LinkContainer","Profile","state","trophyIds","hasAllTrophies","retrieveTrophy","url","props","myUserId","response","fetch","json","status","Error","message","console","log","renderTrofiess","trophies","i","length","push","trophyId","renderHasAllTrofies","componentDidMount","then","res","setState","userIds","userId","allTrophiesUserIds","renderBaseLogo","baseId","render","username","horoscope"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport \"./Profile.css\";\nimport ElectricBass from './images/electricBass.png';\nimport ChemicalBase from './images/chemicalBase.png';\nimport Baseball from './images/baseball.png';\nimport Trophy from \"./Trophy.js\";\nimport Post from \"./Post\";\nimport {NavItem} from \"react-bootstrap\";\nimport {LinkContainer} from \"react-router-bootstrap\";\n\n\nclass Profile extends Component\n{\n    state = {\n        trophyIds: [],\n        hasAllTrophies: false\n    };\n\n    componentDidMount() {\n        console.log(\"call componentDidMount\")\n        // Load the trophies\n        this.retrieveTrophy()\n            .then(res => {\n                console.log(res.trophyIds);\n                console.log(typeof res.trophyIds);\n                this.setState( {\n\n                trophyIds: res.trophyIds\n                });\n            });\n        this.hasAllTrophies()\n            .then(res => {\n                console.log('get all user ids that has all trophies');\n                console.log(res.userIds);\n                console.log(typeof res.userIds);\n                console.log(this.props.myUserId);\n                console.log(res.userIds[1].userId);\n                let allTrophiesUserIds = res.userIds;\n                for (let i = 0; i < allTrophiesUserIds.length; i++)\n                {\n                    if (this.props.myUserId == allTrophiesUserIds[i].userId){\n                        console.log('you have all the trophies!')\n                        this.setState( {\n                            hasAllTrophies: true\n                        });\n                    }\n                }\n                console.log(this.state.hasAllTrophies);\n            });\n    }\n\n    retrieveTrophy = async () => {\n        // console.log('get api is called');\n        // console.log(\"user id: \" + this.props.myUserId);\n        let url = '/get_trophies?userId=' + this.props.myUserId;\n        const response = await fetch(url)\n\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n        console.log(json);\n        return json;\n    }\n\n    renderTrofiess = () =>\n    {\n        let trophies = [];\n\n        // Add the trophies\n        let trophyIds = this.state.trophyIds;\n        for (let i = 0; i < trophyIds.length; ++i)\n        {\n            trophies.push(<Trophy trophyId = {trophyIds[i].trophyId} myUserId={this.props.myUserId}/>);\n        }\n        return trophies;\n    }\n\n    renderBaseLogo(baseId)\n    {\n        switch(baseId) {\n            case 1:\n              return <img src={ElectricBass} />;\n            case 2:\n              return <img src={ChemicalBase} />;\n            case 3:\n              return <img src={Baseball} />;\n            case 4:\n              return <p>Log base</p>;\n            case 5:\n              return <p>Bass Fish</p>;;\n            default:\n              return null;\n        }\n    }\n    \n    hasAllTrophies = async () => {\n        console.log('hasAllTrophies is called');\n        console.log(\"user id: \" + this.props.myUserId);\n        let url = '/has_all_trophies';\n        const response = await fetch(url)\n\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n        console.log(json);\n        return json;\n    }\n\n    renderHasAllTrofies = () =>\n    {\n        let hasAllTrophies = this.state.hasAllTrophies;\n        console.log(hasAllTrophies);\n        if (hasAllTrophies) {\n            return <p>you have all the trophies!</p>;\n        }\n\n    }\n\n\n    render() {\n        return (\n            <div className='Profile-container'>\n                <h1>User Profile Here</h1>\n                {this.renderBaseLogo(this.props.baseId)}\n                <p>BaseId: {this.props.baseId}</p>\n                <p>Username: {this.props.username}</p>\n                <p>Horoscope: {this.props.horoscope}</p>\n                {/*<span>&nbsp;</span>*/}\n                <p>Points: {this.props.log}</p>\n                {this.renderHasAllTrofies()}\n                {this.renderTrofiess()}\n            </div>\n        );\n    }\n}\n\n\nexport default Profile;"]},"metadata":{},"sourceType":"module"}