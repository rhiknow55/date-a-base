{"ast":null,"code":"var _jsxFileName = \"/Users/Rhino/date-a-base/client/src/Feed.js\";\nimport React, { Component } from 'react';\nimport Post, { AddPost } from \"./Post\";\nimport './Feed.css';\nconst NUMBER_OF_POSTS_TO_LOAD = 10;\n\nclass Feed extends Component {\n  constructor(props) {\n    super(props);\n\n    this.retrieveFeed = async () => {\n      let url = '/retrieve_posts?numberOfPosts=' + NUMBER_OF_POSTS_TO_LOAD;\n      const response = await fetch(url);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      return json;\n    };\n\n    this.renderPosts = () => {\n      let posts = []; // Add the posts\n\n      let postIds = this.state.postIds;\n\n      for (let i = 0; i < postIds.length; ++i) {\n        posts.push(React.createElement(Post, {\n          key: postIds[i].postid,\n          postId: postIds[i].postid,\n          myUserId: this.props.myUserId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }));\n      }\n\n      return posts;\n    };\n\n    this.refreshFeed = () => {\n      this.loadFeed();\n    };\n\n    this.retrieveFriendsFeedAsync = async () => {\n      let url = '/retrieve_friends_posts?numberOfPosts=' + NUMBER_OF_POSTS_TO_LOAD;\n      const response = await fetch(url);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      return json;\n    };\n\n    this.state = {\n      postIds: []\n    };\n    this.filter = this.filter.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadFeed();\n  }\n\n  loadFeed() {\n    // Load the feed contents\n    this.retrieveFeed().then(res => {\n      this.setState({\n        postIds: res.postIds\n      });\n    });\n  }\n\n  filter(event) {\n    if (this.state.filteredByFriend) {\n      this.loadFeed();\n    } else {}\n\n    event.preventDefault();\n  }\n\n  retrieveFriendsFeed() {\n    // Load the feed contents\n    this.retrieveFriendsFeedAsync().then(res => {\n      this.setState({\n        postIds: res.postIds\n      });\n    });\n  }\n\n  render() {\n    return (// TODO: Make a box that contains the posts\n      React.createElement(\"div\", {\n        className: \"Feed-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"Feed Start\"), React.createElement(AddPost, {\n        myUserId: this.props.myUserId,\n        refresh: this.refreshFeed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.filter,\n        className: \"btn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, this.state.filteredByFriend ? 'Global' : 'Friends'), this.renderPosts())\n    );\n  }\n\n}\n\nexport default Feed;","map":{"version":3,"sources":["/Users/Rhino/date-a-base/client/src/Feed.js"],"names":["React","Component","Post","AddPost","NUMBER_OF_POSTS_TO_LOAD","Feed","constructor","props","retrieveFeed","url","response","fetch","json","status","Error","message","renderPosts","posts","postIds","state","i","length","push","postid","myUserId","refreshFeed","loadFeed","retrieveFriendsFeedAsync","filter","bind","componentDidMount","then","res","setState","event","filteredByFriend","preventDefault","retrieveFriendsFeed","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Post, {AddPost} from \"./Post\";\nimport './Feed.css'\n\nconst NUMBER_OF_POSTS_TO_LOAD = 10;\n\nclass Feed extends Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            postIds: []\n        };\n\n        this.filter = this.filter.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadFeed();\n    }\n\n    loadFeed()\n    {\n        // Load the feed contents\n        this.retrieveFeed()\n            .then(res => {this.setState( {\n            postIds: res.postIds\n        })}\n    );\n    }\n\n    retrieveFeed = async () => {\n        let url = '/retrieve_posts?numberOfPosts=' + NUMBER_OF_POSTS_TO_LOAD;\n        const response = await fetch(url)\n\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n        return json;\n    }\n\n    // Translates this.state.postIds into legible React Post objects\n    renderPosts = () =>\n    {\n        let posts = [];\n\n        // Add the posts\n        let postIds = this.state.postIds;\n        for (let i = 0; i < postIds.length; ++i)\n        {\n            posts.push(<Post key={postIds[i].postid} postId = {postIds[i].postid} myUserId={this.props.myUserId}/>);\n        }\n\n        return posts;\n    }\n\n    // Refresh the comment section. Callback for when you add a comment\n    refreshFeed = () =>\n    {\n        this.loadFeed();\n    }\n\n    filter(event){\n        if (this.state.filteredByFriend)\n        {\n            this.loadFeed();\n        }\n        else\n        {\n\n        }\n\n        event.preventDefault();\n    }\n\n    retrieveFriendsFeed()\n    {\n        // Load the feed contents\n        this.retrieveFriendsFeedAsync()\n            .then(res => {this.setState( {\n                postIds: res.postIds\n            })}\n    );\n    }\n\n    retrieveFriendsFeedAsync = async () => {\n        let url = '/retrieve_friends_posts?numberOfPosts=' + NUMBER_OF_POSTS_TO_LOAD;\n        const response = await fetch(url)\n\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n        return json;\n    }\n\n    render() {\n        return (\n            // TODO: Make a box that contains the posts\n            <div className='Feed-container'>\n                <p>Feed Start</p>\n                <AddPost myUserId={this.props.myUserId} refresh={this.refreshFeed} />\n\n                <button type=\"button\" onClick={this.filter} className=\"btn\">{this.state.filteredByFriend ? 'Global' : 'Friends'}</button>\n                {this.renderPosts()}\n            </div>\n        );\n    }\n}\n\n\nexport default Feed;"]},"metadata":{},"sourceType":"module"}