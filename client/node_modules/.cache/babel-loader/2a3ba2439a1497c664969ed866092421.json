{"ast":null,"code":"var _jsxFileName = \"C:\\\\d\\\\date-a-base\\\\client\\\\src\\\\Post.js\";\nimport React, { Component } from 'react';\nimport { CommentSection, AddComment, CommentBox } from './Comment.js';\nimport './Post.css';\n\nclass Post extends Component {\n  constructor(props) {\n    super(props);\n\n    this.retrieveFeed = async () => {\n      let url = '/get_post?postId=' + this.state.postId;\n      const response = await fetch(url);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      return json;\n    };\n\n    this.getUserData = function () {\n      this.retrieveUserData().then(res => this.setState({\n        user: {\n          username: res.username,\n          horoscope: res.horoscope,\n          log: res.log\n        }\n      }));\n    };\n\n    this.retrieveUserData = async () => {\n      const response = await fetch('/user_data?userId=' + this.state.userId);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      return json;\n    };\n\n    this.addComment = function () {\n      // POST comment\n      console.log(\"Comment added!\");\n    };\n\n    this.refreshCommentSection = () => {\n      this.commentSection.loadComments();\n    };\n\n    this.state = {\n      postId: this.props.postId,\n      message: null,\n      image: null,\n      userId: null,\n      user: {\n        username: null,\n        horoscope: null,\n        log: null\n      }\n    };\n  }\n\n  componentDidMount() {\n    // Load the feed contents\n    this.retrieveFeed().then(res => {\n      this.setState({\n        message: res.message,\n        image: res.image,\n        userId: res.userId\n      });\n      this.getUserData();\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Post-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Post Id = \", this.state.postId), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Username = \", this.state.user.username), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Message = \", this.state.message), React.createElement(CommentSection, {\n      onRef: ref => this.commentSection = ref,\n      postId: this.state.postId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(AddComment, {\n      postId: this.state.postId,\n      myUserId: this.props.myUserId,\n      refresh: this.refreshCommentSection,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Post;","map":{"version":3,"sources":["C:\\d\\date-a-base\\client\\src\\Post.js"],"names":["React","Component","CommentSection","AddComment","CommentBox","Post","constructor","props","retrieveFeed","url","state","postId","response","fetch","json","status","Error","message","getUserData","retrieveUserData","then","res","setState","user","username","horoscope","log","userId","addComment","console","refreshCommentSection","commentSection","loadComments","image","componentDidMount","render","ref","myUserId"],"mappings":"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","sourcesContent":["import React, { Component }from 'react';\r\nimport { CommentSection, AddComment, CommentBox } from './Comment.js';\r\nimport './Post.css';\r\n\r\n\r\nclass Post extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            postId: this.props.postId,\r\n            message: null,\r\n            image: null,\r\n            userId: null,\r\n            user: {username: null, horoscope: null, log: null}\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Load the feed contents\r\n        this.retrieveFeed()\r\n            .then(res => {\r\n            this.setState({\r\n                message: res.message,\r\n                image: res.image,\r\n                userId: res.userId\r\n            });\r\n\r\n            this.getUserData();\r\n        });\r\n    }\r\n\r\n    retrieveFeed = async () => {\r\n        let url = '/get_post?postId=' + this.state.postId;\r\n        const response = await fetch(url)\r\n\r\n        const json = await response.json();\r\n\r\n        if (response.status !== 200) {\r\n            throw Error(json.message)\r\n        }\r\n        return json;\r\n    }\r\n\r\n    getUserData = function()\r\n    {\r\n        this.retrieveUserData()\r\n            .then(res => this.setState( {\r\n            user: {username: res.username, horoscope: res.horoscope, log: res.log}\r\n        }));\r\n    }\r\n\r\n    retrieveUserData = async () => {\r\n        const response = await fetch('/user_data?userId=' + this.state.userId);\r\n        const json = await response.json();\r\n\r\n        if (response.status !== 200) {\r\n            throw Error(json.message)\r\n        }\r\n        return json;\r\n    }\r\n\r\n    // Add comment function\r\n    addComment = function()\r\n    {\r\n        // POST comment\r\n\r\n        console.log(\"Comment added!\");\r\n    }\r\n\r\n    // Refresh the comment section. Callback for when you add a comment\r\n    refreshCommentSection = () =>\r\n    {\r\n        this.commentSection.loadComments();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Post-container\">\r\n                <p>Post Id = {this.state.postId}</p>\r\n                <p>Username = {this.state.user.username}</p>\r\n                <p>Message = {this.state.message}</p>\r\n\r\n                <CommentSection onRef={ref => (this.commentSection = ref)} postId={this.state.postId}/>\r\n                <AddComment postId={this.state.postId} myUserId={this.props.myUserId} refresh={this.refreshCommentSection}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Post;"]},"metadata":{},"sourceType":"module"}