{"ast":null,"code":"var _jsxFileName = \"/Users/Azio/Documents/GitHub/date-a-base/client/src/Chat.js\";\nimport React, { Component } from 'react';\nimport MessageList from './MessageList.js';\nimport SendMessageForm from './SendMessageForm.js';\nconst DUMMY_DATA = [{\n  senderId: 'user1',\n  text: 'Hey, how is it going?'\n}, {\n  senderId: 'user2',\n  text: 'Great! How about you?'\n}, {\n  senderId: 'user1',\n  text: 'Good to hear! I am great as well'\n}];\n\nclass Chat extends React.Component {\n  constructor() {\n    super();\n\n    this.retrieveMessages = async () => {\n      let url = '/retrieve_messages?userId=' + this.props.myUserId;\n      const response = await fetch(url);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.messages);\n      }\n\n      return json;\n    };\n\n    this.retrieveRoomIds = async () => {\n      let url = '/retrieve_roomIds?userId=' + this.props.myUserId;\n      const response = await fetch(url);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.messages);\n      }\n\n      return json;\n    };\n\n    this.addMessage = function (chatmessageid) {\n      this.postMsg(chatmessageid).then(this.props.refresh(), this.setState({\n        message: \"\"\n      }));\n    };\n\n    this.postMsg = async chatmessageid => {\n      let url = '/post_message';\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          chatMessageId: chatmessageid,\n          message: this.state.text,\n          chatSessionId: this.state.roomId[0].sessionId,\n          userId: this.props.myUserId\n        })\n      });\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      return json;\n    };\n\n    this.state = {\n      messages: [],\n      text: '',\n      roomIds: [],\n      number: 0\n    };\n    this.sendMessage = this.sendMessage.bind(this);\n  }\n\n  componentDidMount() {\n    // Load the feed contents\n    this.retrieveMessages().then(res => this.setState({\n      // messages: res.postIds\n      messages: res.messages,\n      number: res.number\n    }));\n    this.retrieveRoomIds().then(res => this.setState({\n      // messages: res.postIds\n      roomIds: res.roomIds\n    }));\n  } // need to retrieve messages\n\n\n  sendMessage(text) {\n    this.setState({\n      // messages: res.postIds\n      text: text\n    });\n    this.postMessage(this.state.text);\n  }\n\n  postMessage(text) {\n    let chatmessageid = this.props.myUserId.toString() + this.state.roomIds[0].sessionId.toString() + this.state.number.toString();\n    this.addMessage(chatmessageid);\n  } // Actually sending an API call to post comment to database\n\n\n  render() {\n    if (this.state.roomIds[0] == undefined) {} else {\n      console.log(this.state.roomIds[0].sessionId);\n    }\n\n    return React.createElement(\"div\", {\n      className: \"Chat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(MessageList, {\n      messages: this.state.messages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), React.createElement(SendMessageForm, {\n      sendMessage: this.sendMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/Azio/Documents/GitHub/date-a-base/client/src/Chat.js"],"names":["React","Component","MessageList","SendMessageForm","DUMMY_DATA","senderId","text","Chat","constructor","retrieveMessages","url","props","myUserId","response","fetch","json","status","Error","messages","retrieveRoomIds","addMessage","chatmessageid","postMsg","then","refresh","setState","message","method","headers","body","JSON","stringify","chatMessageId","state","chatSessionId","roomId","sessionId","userId","roomIds","number","sendMessage","bind","componentDidMount","res","postMessage","toString","render","undefined","console","log"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport MessageList from './MessageList.js';\nimport SendMessageForm from './SendMessageForm.js'\n\n\nconst DUMMY_DATA = [\n    {\n        senderId: 'user1',\n        text: 'Hey, how is it going?'\n    },\n    {\n        senderId: 'user2',\n        text: 'Great! How about you?'\n    },\n    {\n        senderId: 'user1',\n        text: 'Good to hear! I am great as well'\n    }\n]\n\n\n\nclass Chat extends React.Component {\n\n\n\n    constructor() {\n        super()\n        this.state = {\n            messages: [],\n            text: '',\n            roomIds: [],\n            number: 0\n        }\n\n        this.sendMessage = this.sendMessage.bind(this)\n\n    }\n\n    componentDidMount() {\n        // Load the feed contents\n        this.retrieveMessages()\n            .then(res => this.setState( {\n               // messages: res.postIds\n                messages: res.messages,\n                number: res.number\n            }));\n\n        this.retrieveRoomIds()\n            .then(res => this.setState( {\n                // messages: res.postIds\n                roomIds: res.roomIds\n\n            }));\n\n\n    }\n\n\n    // need to retrieve messages\n    retrieveMessages = async () => {\n        let url = '/retrieve_messages?userId=' + this.props.myUserId;\n        const response = await fetch(url)\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.messages)\n        }\n\n\n        return json;\n    }\n\n    retrieveRoomIds = async () => {\n        let url = '/retrieve_roomIds?userId=' + this.props.myUserId;\n        const response = await fetch(url)\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.messages)\n        }\n\n\n        return json;\n    }\n\n\n\n    sendMessage(text) {\n        this.setState( {\n            // messages: res.postIds\n            text: text\n        })\n        this.postMessage(this.state.text)\n\n    }\n\n\n    postMessage(text)\n    {\n        let chatmessageid = this.props.myUserId.toString() + this.state.roomIds[0].sessionId.toString() + this.state.number.toString();\n        this.addMessage(chatmessageid);\n    }\n\n    // Actually sending an API call to post comment to database\n    addMessage = function(chatmessageid){\n        this.postMsg(chatmessageid)\n            .then(\n                this.props.refresh(),\n                this.setState({message: \"\"})\n            );\n    }\n\n    postMsg = async (chatmessageid) =>\n    {\n        let url = '/post_message';\n        const response = await fetch(url,\n            {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({chatMessageId: chatmessageid, message: this.state.text, chatSessionId: this.state.roomId[0].sessionId, userId: this.props.myUserId})\n            });\n\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n\n        return json;\n    }\n\n\n\n    render() {\n        if (this.state.roomIds[0] == undefined) {} else {console.log(this.state.roomIds[0].sessionId)}\n\n        return (\n        <div className=\"Chat\">\n            <MessageList messages={this.state.messages}/>\n            <SendMessageForm  sendMessage={this.sendMessage}/>\n            </div>\n\n    )\n    }\n}\n\nexport default Chat"]},"metadata":{},"sourceType":"module"}