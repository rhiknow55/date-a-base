{"ast":null,"code":"var _jsxFileName = \"/Users/Rhino/date-a-base/client/src/Post.js\";\nimport React, { Component } from 'react';\nimport { CommentSection, AddComment, CommentBox } from './Comment.js';\nimport './Post.css';\n\nclass Post extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getPost = async () => {\n      let url = '/get_post?postId=' + this.state.postId;\n      const response = await fetch(url);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      return json;\n    };\n\n    this.getUserData = function () {\n      this.retrieveUserData().then(res => this.setState({\n        user: {\n          username: res.username,\n          horoscope: res.horoscope,\n          log: res.log\n        }\n      }));\n    };\n\n    this.retrieveUserData = async () => {\n      const response = await fetch('/user_data?userId=' + this.state.userId);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      return json;\n    };\n\n    this.getLikedPost = function () {\n      this.retrieveLikedPost().then(res => this.setState({\n        liked: res.liked\n      }));\n    };\n\n    this.retrieveLikedPost = async () => {\n      const response = await fetch('/get_if_like?userId=' + this.state.userId + '&postId=' + this.state.postId);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      return json;\n    };\n\n    this.refreshCommentSection = () => {\n      this.commentSection.loadComments();\n    };\n\n    this.state = {\n      postId: this.props.postId,\n      message: null,\n      image: null,\n      userId: null,\n      user: {\n        username: null,\n        horoscope: null,\n        log: null\n      },\n      liked: false\n    };\n  }\n\n  componentDidMount() {\n    // Load the feed contents\n    this.getPost().then(res => {\n      this.setState({\n        message: res.message,\n        image: res.image,\n        userId: res.userId\n      });\n      this.getUserData();\n      this.getLikedPost();\n    });\n  }\n\n  handleLike(event) {\n    event.preventDefault();\n  } // Refresh the comment section. Callback for when you add a comment\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Post-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Post = \", this.state.postId), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Username = \", this.state.user.username), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Message = \", this.state.message), React.createElement(\"form\", {\n      onSubmit: this.handleLike,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"Comment-user-button\",\n      onClick: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, this.state.liked ? 'Unlike' : 'Like')), React.createElement(CommentSection, {\n      onRef: ref => this.commentSection = ref,\n      postId: this.state.postId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(AddComment, {\n      postId: this.state.postId,\n      myUserId: this.props.myUserId,\n      refresh: this.refreshCommentSection,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport class AddPost extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getNumberOfPosts = () => {\n      this.getPostsMade().then(res => {\n        this.actuallySubmit(res.amount);\n      });\n    };\n\n    this.getPostsMade = async () => {\n      const response = await fetch('/posts_made_by_user?userId=' + this.props.myUserId);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      return json;\n    };\n\n    this.addPost = function (postId) {\n      this.postPost(postId).then(this.props.refresh(), this.setState({\n        message: \"\"\n      }));\n    };\n\n    this.postPost = async postId => {\n      let url = '/add_post';\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          postId: postId,\n          message: this.state.message,\n          userId: this.props.myUserId\n        })\n      });\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      return json;\n    };\n\n    this.state = {\n      message: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  } // Handling change of textbox\n\n\n  handleChange(event) {\n    this.setState({\n      message: event.target.value\n    });\n  } // Handling the click of the submit button. Will get the number of posts made by user\n\n\n  handleSubmit(event) {\n    // Post to database\n    this.getNumberOfPosts(); // Prevent page from refreshing\n\n    event.preventDefault();\n  } // Get number of posts made by user so far\n\n\n  // This gets called once done getting number of comments\n  // It calls the actual method that adds the comment\n  actuallySubmit(postAmount) {\n    let postId = this.props.myUserId.toString() + '0' + postAmount.toString();\n    this.addPost(postId);\n  } // Actually sending an API call to post comment to database\n\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      className: \"form-control rounded-5\",\n      value: this.state.message,\n      onChange: this.handleChange,\n      id: \"exampleFormControlTextarea1\",\n      placeholder: \"What's on your mind?\",\n      rows: \"10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, \"\\xA0\"), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-primary mb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, \"Post\"), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, \"\\xA0\")));\n  }\n\n}\nexport default Post;","map":{"version":3,"sources":["/Users/Rhino/date-a-base/client/src/Post.js"],"names":["React","Component","CommentSection","AddComment","CommentBox","Post","constructor","props","getPost","url","state","postId","response","fetch","json","status","Error","message","getUserData","retrieveUserData","then","res","setState","user","username","horoscope","log","userId","getLikedPost","retrieveLikedPost","liked","refreshCommentSection","commentSection","loadComments","image","componentDidMount","handleLike","event","preventDefault","render","ref","myUserId","AddPost","getNumberOfPosts","getPostsMade","actuallySubmit","amount","addPost","postPost","refresh","method","headers","body","JSON","stringify","handleChange","bind","handleSubmit","target","value","postAmount","toString"],"mappings":"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","sourcesContent":["import React, { Component }from 'react';\nimport { CommentSection, AddComment, CommentBox } from './Comment.js';\nimport './Post.css';\n\n\nclass Post extends Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            postId: this.props.postId,\n            message: null,\n            image: null,\n            userId: null,\n            user: {username: null, horoscope: null, log: null},\n            liked: false\n        }\n    }\n\n    componentDidMount() {\n        // Load the feed contents\n        this.getPost()\n            .then(res => {\n            this.setState({\n                message: res.message,\n                image: res.image,\n                userId: res.userId\n            });\n\n            this.getUserData();\n            this.getLikedPost();\n        });\n\n\n    }\n\n    getPost = async () => {\n        let url = '/get_post?postId=' + this.state.postId;\n        const response = await fetch(url)\n\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n        return json;\n    }\n\n    getUserData = function()\n    {\n        this.retrieveUserData()\n            .then(res => this.setState( {\n            user: {username: res.username, horoscope: res.horoscope, log: res.log}\n        }));\n    }\n\n    retrieveUserData = async () => {\n        const response = await fetch('/user_data?userId=' + this.state.userId);\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n        return json;\n    }\n\n    getLikedPost = function()\n    {\n        this.retrieveLikedPost()\n            .then(res => this.setState( {\n            liked: res.liked\n        }));\n    }\n\n    retrieveLikedPost = async () => {\n        const response = await fetch('/get_if_like?userId=' + this.state.userId + '&postId=' + this.state.postId);\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n        return json;\n    }\n\n    handleLike(event) {\n\n        \n        event.preventDefault();\n    }\n\n    // Refresh the comment section. Callback for when you add a comment\n    refreshCommentSection = () =>\n    {\n        this.commentSection.loadComments();\n    }\n\n    render() {\n        return (\n            <div className=\"Post-container\">\n                <p>Post = {this.state.postId}</p>\n                <p>Username = {this.state.user.username}</p>\n                <p>Message = {this.state.message}</p>\n            <form onSubmit={this.handleLike}>\n                <button className=\"Comment-user-button\" onClick>{this.state.liked ? 'Unlike' : 'Like'}</button>\n            </form>\n                <CommentSection onRef={ref => (this.commentSection = ref)} postId={this.state.postId}/>\n                <AddComment postId={this.state.postId} myUserId={this.props.myUserId} refresh={this.refreshCommentSection}/>\n            </div>\n        );\n    }\n}\n\nexport class AddPost extends Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {message: \"\"};\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    // Handling change of textbox\n    handleChange(event) {\n        this.setState({message: event.target.value});\n    }\n\n    // Handling the click of the submit button. Will get the number of posts made by user\n    handleSubmit(event) {\n        // Post to database\n        this.getNumberOfPosts();\n\n        // Prevent page from refreshing\n        event.preventDefault()\n    }\n\n    // Get number of posts made by user so far\n    getNumberOfPosts = () =>\n    {\n        this.getPostsMade()\n            .then(res => {\n                this.actuallySubmit(res.amount)\n            });\n    }\n\n    getPostsMade = async () => {\n        const response = await fetch('/posts_made_by_user?userId=' + this.props.myUserId);\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n        return json;\n    }\n\n    // This gets called once done getting number of comments\n    // It calls the actual method that adds the comment\n    actuallySubmit(postAmount)\n    {\n        let postId = this.props.myUserId.toString() + '0' + postAmount.toString();\n        this.addPost(postId);\n    }\n\n    // Actually sending an API call to post comment to database\n    addPost = function(postId){\n        this.postPost(postId)\n            .then(\n                this.props.refresh(),\n                this.setState({message: \"\"})\n            );\n    }\n\n    postPost = async (postId) =>\n    {\n        let url = '/add_post';\n        const response = await fetch(url,\n        {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({postId: postId, message: this.state.message, userId: this.props.myUserId})\n        });\n\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n\n        return json;\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"form-group\">\n                    <textarea className=\"form-control rounded-5\" value={this.state.message} onChange={this.handleChange}\n                        id=\"exampleFormControlTextarea1\" placeholder=\"What's on your mind?\" rows=\"10\"></textarea>\n                    <span>&nbsp;</span>\n                    <button type=\"submit\" className=\"btn btn-primary mb-2\">Post</button>\n                    <span>&nbsp;</span>\n                </div>\n            </form>\n        );\n    }\n}\n\n\nexport default Post;"]},"metadata":{},"sourceType":"module"}