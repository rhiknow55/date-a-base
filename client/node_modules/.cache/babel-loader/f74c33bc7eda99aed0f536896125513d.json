{"ast":null,"code":"var _jsxFileName = \"/Users/Rhino/date-a-base/client/src/Feed.js\";\nimport React, { Component } from 'react';\nimport Post from \"./Post\";\nconst NUMBER_OF_POSTS_TO_LOAD = 10;\n\nclass Feed extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: null\n    };\n\n    this.retrieveFeed = async () => {\n      var url = '/recent_posts/' + NUMBER_OF_POSTS_TO_LOAD;\n      const response = await fetch(url.concat(NUMBER_OF_POSTS_TO_LOAD));\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      return json;\n    };\n\n    this.loadPosts = () => {\n      let posts = []; // Add the posts\n\n      for (let i = 0; i < NUMBER_OF_POSTS_TO_LOAD; ++i) {\n        // TODO: Get the recent posts via timestamp from express\n        posts.push(React.createElement(Post, {\n          postName: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }));\n      }\n\n      return posts;\n    };\n  }\n\n  componentDidMount() {\n    // Load the feed contents\n    this.retrieveFeed().then(res => this.setState({\n      data: res.data\n    }));\n  }\n\n  render() {\n    return (// TODO: Make a box that contains the posts\n      React.createElement(\"div\", {\n        className: \"User\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"Feed Start\"), \"//Has some stuff like filter, then the scrollable layout with posts\", this.loadPosts())\n    );\n  }\n\n}\n\nexport default Feed;","map":{"version":3,"sources":["/Users/Rhino/date-a-base/client/src/Feed.js"],"names":["React","Component","Post","NUMBER_OF_POSTS_TO_LOAD","Feed","state","data","retrieveFeed","url","response","fetch","concat","json","status","Error","message","loadPosts","posts","i","push","componentDidMount","then","res","setState","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,MAAMC,uBAAuB,GAAG,EAAhC;;AAEA,MAAMC,IAAN,SAAmBH,SAAnB,CAA6B;AAAA;AAAA;AAAA,SACzBI,KADyB,GACjB;AACJC,MAAAA,IAAI,EAAE;AADF,KADiB;;AAAA,SAazBC,YAbyB,GAaV,YAAY;AACvB,UAAIC,GAAG,GAAG,mBAAmBL,uBAA7B;AACA,YAAMM,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAACG,MAAJ,CAAWR,uBAAX,CAAD,CAA5B;AACA,YAAMS,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAT,EAAnB;;AAEA,UAAIH,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EAA6B;AACzB,cAAMC,KAAK,CAACF,IAAI,CAACG,OAAN,CAAX;AACH;;AACD,aAAOH,IAAP;AACH,KAtBwB;;AAAA,SAwBzBI,SAxByB,GAwBb,MACZ;AACI,UAAIC,KAAK,GAAG,EAAZ,CADJ,CAGI;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,uBAApB,EAA6C,EAAEe,CAA/C,EACA;AACI;AACAD,QAAAA,KAAK,CAACE,IAAN,CAAW,oBAAC,IAAD;AAAM,UAAA,QAAQ,EAAID,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAX;AACH;;AAED,aAAOD,KAAP;AACH,KApCwB;AAAA;;AAKzBG,EAAAA,iBAAiB,GAAG;AAChB;AACA,SAAKb,YAAL,GACKc,IADL,CACUC,GAAG,IAAI,KAAKC,QAAL,CAAe;AACxBjB,MAAAA,IAAI,EAAEgB,GAAG,CAAChB;AADc,KAAf,CADjB;AAIH;;AA2BDkB,EAAAA,MAAM,GAAG;AACL,WACI;AACA;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,yEAIK,KAAKR,SAAL,EAJL;AAFJ;AASH;;AAhDwB;;AAoD7B,eAAeZ,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport Post from \"./Post\";\n\nconst NUMBER_OF_POSTS_TO_LOAD = 10;\n\nclass Feed extends Component {\n    state = {\n        data: null\n    };\n\n    componentDidMount() {\n        // Load the feed contents\n        this.retrieveFeed()\n            .then(res => this.setState( {\n                data: res.data\n            }));\n    }\n\n    retrieveFeed = async () => {\n        var url = '/recent_posts/' + NUMBER_OF_POSTS_TO_LOAD;\n        const response = await fetch(url.concat(NUMBER_OF_POSTS_TO_LOAD));\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n        return json;\n    }\n\n    loadPosts = () =>\n    {\n        let posts = [];\n\n        // Add the posts\n        for (let i = 0; i < NUMBER_OF_POSTS_TO_LOAD; ++i)\n        {\n            // TODO: Get the recent posts via timestamp from express\n            posts.push(<Post postName = {i}/>);\n        }\n\n        return posts;\n    }\n\n    render() {\n        return (\n            // TODO: Make a box that contains the posts\n            <div className=\"User\">\n                <p>Feed Start</p>\n                //Has some stuff like filter, then the scrollable layout with posts\n\n                {this.loadPosts()}\n            </div>\n        );\n    }\n}\n\n\nexport default Feed;"]},"metadata":{},"sourceType":"module"}