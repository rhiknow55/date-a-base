{"ast":null,"code":"var _jsxFileName = \"/Users/Azio/Documents/GitHub/date-a-base/client/src/Chat.js\";\nimport React, { Component } from 'react';\nimport MessageList from './MessageList.js';\nimport SendMessageForm from './SendMessageForm.js';\nimport RoomList from './RoomList.js';\nconst DUMMY_DATA = [{\n  senderId: 'user1',\n  text: 'Hey, how is it going?'\n}, {\n  senderId: 'user2',\n  text: 'Great! How about you?'\n}, {\n  senderId: 'user1',\n  text: 'Good to hear! I am great as well'\n}];\n\nclass Chat extends React.Component {\n  constructor() {\n    super();\n\n    this.retrieveMessages = async () => {\n      let url = '/retrieve_messages?userId=' + this.props.myUserId;\n      const response = await fetch(url);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.messages);\n      }\n\n      return json;\n    };\n\n    this.retrieveRoomIds = async () => {\n      let url = '/retrieve_roomIds?userId=' + this.props.myUserId;\n      const response = await fetch(url);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.messages);\n      }\n\n      return json;\n    };\n\n    this.addMessage = function (chatmessageid) {\n      this.postMsg(chatmessageid).then(this.setState({\n        message: \"\"\n      }));\n    };\n\n    this.postMsg = async chatmessageid => {\n      let url = '/post_message'; //console.log(\"============\")\n      //console.log(this.props.myUserId)\n      //console.log(this.state.roomIds[0].sessionId)\n      //console.log(this.state.number)\n      //console.log(JSON.stringify({chatMessageId: chatmessageid, message: this.state.text, chatSessionId: this.state.roomIds[0].sessionId, userId: this.props.myUserId}))\n\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          chatMessageId: chatmessageid,\n          message: this.state.text,\n          chatSessionId: this.state.roomIds[0].sessionId,\n          userId: this.props.myUserId\n        })\n      });\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      return json;\n    };\n\n    this.state = {\n      messages: [],\n      text: '',\n      roomIds: [],\n      number: 0,\n      Rooms: []\n    };\n    this.sendMessage = this.sendMessage.bind(this);\n  }\n\n  componentDidMount() {\n    // Load the feed contents\n    this.retrieveMessages().then(res => this.setState({\n      // messages: res.postIds\n      messages: res.messages,\n      number: res.number\n    }));\n    this.retrieveRoomIds().then(res => this.setState({\n      // messages: res.postIds\n      roomIds: res.roomIds\n    }));\n  } // need to retrieve messages\n\n\n  sendMessage(text) {\n    this.setState({\n      text: text\n    }, () => {\n      this.postMessage(this.state.text);\n      this.loadChat();\n    });\n  }\n\n  postMessage(text) {\n    //console.log(this.props.myUserId)\n    //console.log(this.state.roomIds[0])\n    //console.log(this.state.number)\n    let chatmessageid = this.props.myUserId.toString() + this.state.roomIds[0].sessionId.toString() + (this.state.number + 1).toString();\n    this.addMessage(chatmessageid);\n  } // Actually sending an API call to post comment to database\n\n\n  loadChat() {\n    // Load the chat for this post\n    this.retrieveMessages().then(res => this.setState({\n      // messages: res.postIds\n      messages: res.messages,\n      number: res.number\n    }));\n  }\n\n  render() {\n    //if (this.state.roomIds[0] == undefined) {} else {console.log(this.state.roomIds[0].sessionId)}\n    //            text: '',\n    //roomIds: [],\n    //   number: 0\n    console.log(\"============\");\n    console.log(this.state);\n    return React.createElement(\"div\", {\n      className: \"Chat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(RoomList, {\n      rooms: this.state.Rooms,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), React.createElement(MessageList, {\n      messages: this.state.messages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }), React.createElement(SendMessageForm, {\n      sendMessage: this.sendMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/Azio/Documents/GitHub/date-a-base/client/src/Chat.js"],"names":["React","Component","MessageList","SendMessageForm","RoomList","DUMMY_DATA","senderId","text","Chat","constructor","retrieveMessages","url","props","myUserId","response","fetch","json","status","Error","messages","retrieveRoomIds","addMessage","chatmessageid","postMsg","then","setState","message","method","headers","body","JSON","stringify","chatMessageId","state","chatSessionId","roomIds","sessionId","userId","number","Rooms","sendMessage","bind","componentDidMount","res","postMessage","loadChat","toString","render","console","log"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport MessageList from './MessageList.js';\nimport SendMessageForm from './SendMessageForm.js'\nimport RoomList from './RoomList.js'\n\n\nconst DUMMY_DATA = [\n    {\n        senderId: 'user1',\n        text: 'Hey, how is it going?'\n    },\n    {\n        senderId: 'user2',\n        text: 'Great! How about you?'\n    },\n    {\n        senderId: 'user1',\n        text: 'Good to hear! I am great as well'\n    }\n]\n\n\n\nclass Chat extends React.Component {\n\n\n\n    constructor() {\n        super()\n        this.state = {\n            messages: [],\n            text: '',\n            roomIds: [],\n            number: 0,\n            Rooms: []\n        }\n\n        this.sendMessage = this.sendMessage.bind(this)\n\n    }\n\n    componentDidMount() {\n        // Load the feed contents\n        this.retrieveMessages()\n            .then(res => this.setState( {\n               // messages: res.postIds\n                messages: res.messages,\n                number: res.number\n            }));\n\n        this.retrieveRoomIds()\n            .then(res => this.setState( {\n                // messages: res.postIds\n                roomIds: res.roomIds\n\n            }));\n\n\n    }\n\n\n\n\n    // need to retrieve messages\n    retrieveMessages = async () => {\n        let url = '/retrieve_messages?userId=' + this.props.myUserId;\n        const response = await fetch(url)\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.messages)\n        }\n\n\n        return json;\n    }\n\n    retrieveRoomIds = async () => {\n        let url = '/retrieve_roomIds?userId=' + this.props.myUserId;\n        const response = await fetch(url)\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.messages)\n        }\n\n\n        return json;\n    }\n\n\n\n    sendMessage(text) {\n        this.setState({text: text}, () => {\n            this.postMessage(this.state.text)\n            this.loadChat()\n        });\n\n\n    }\n\n\n    postMessage(text)\n    {\n        //console.log(this.props.myUserId)\n        //console.log(this.state.roomIds[0])\n        //console.log(this.state.number)\n        let chatmessageid = this.props.myUserId.toString() + this.state.roomIds[0].sessionId.toString() + (this.state.number+1).toString();\n        this.addMessage(chatmessageid);\n    }\n\n    // Actually sending an API call to post comment to database\n    addMessage = function(chatmessageid){\n        this.postMsg(chatmessageid)\n            .then(\n                this.setState({message: \"\"})\n            );\n    }\n\n    postMsg = async (chatmessageid) =>\n    {\n        let url = '/post_message';\n        //console.log(\"============\")\n        //console.log(this.props.myUserId)\n        //console.log(this.state.roomIds[0].sessionId)\n        //console.log(this.state.number)\n        //console.log(JSON.stringify({chatMessageId: chatmessageid, message: this.state.text, chatSessionId: this.state.roomIds[0].sessionId, userId: this.props.myUserId}))\n        const response = await fetch(url,\n            {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({chatMessageId: chatmessageid, message: this.state.text, chatSessionId: this.state.roomIds[0].sessionId, userId: this.props.myUserId})\n            });\n\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n\n        return json;\n    }\n\n\n    loadChat() {\n        // Load the chat for this post\n        this.retrieveMessages()\n            .then(res => this.setState( {\n                // messages: res.postIds\n                messages: res.messages,\n                number: res.number\n            }));\n    }\n\n\n\n    render() {\n        //if (this.state.roomIds[0] == undefined) {} else {console.log(this.state.roomIds[0].sessionId)}\n        //            text: '',\n        //roomIds: [],\n         //   number: 0\n        console.log(\"============\")\n        console.log(this.state)\n        return (\n        <div className=\"Chat\">\n            <RoomList rooms={this.state.Rooms} />\n            <MessageList messages={this.state.messages} />\n            <SendMessageForm  sendMessage={this.sendMessage} />\n            </div>\n\n    )\n    }\n}\n\nexport default Chat"]},"metadata":{},"sourceType":"module"}