{"ast":null,"code":"var _jsxFileName = \"/Users/Azio/Documents/GitHub/date-a-base/client/src/App.js\";\nimport React, { Component } from 'react';\nimport User from './User.js';\nimport Login from './Login.js';\nimport './App.css';\nimport './Color.css';\nimport Chat from './Chat.js';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: null\n    };\n\n    this.callBackendAPI = async () => {\n      const response = await fetch('/express_backend');\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      return body;\n    };\n\n    this.refreshChat = () => {\n      this.Chat.loadChat();\n    };\n  }\n\n  componentDidMount() {\n    // Call our fetch function below once the component mounts\n    this.callBackendAPI().then(res => this.setState({\n      data: res.express\n    })).catch(err => console.log(err));\n  } // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n\n\n  render() {\n    //<Login />\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"App-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Date-a-base\")), React.createElement(\"p\", {\n      className: \"App-intro\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, this.state.data), React.createElement(Chat, {\n      myUserId: 1,\n      onRef: ref => this.Chat = ref,\n      refresh: this.refreshChat,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(User, {\n      myUserId: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Azio/Documents/GitHub/date-a-base/client/src/App.js"],"names":["React","Component","User","Login","Chat","App","state","data","callBackendAPI","response","fetch","body","json","status","Error","message","refreshChat","loadChat","componentDidMount","then","res","setState","express","catch","err","console","log","render","ref"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAO,WAAP;AACA,OAAO,aAAP;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAIA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAAA;AAAA;AAAA,SACxBK,KADwB,GAChB;AACJC,MAAAA,IAAI,EAAE;AADF,KADgB;;AAAA,SAYxBC,cAZwB,GAYP,YAAY;AACzB,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kBAAD,CAA5B;AACA,YAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;;AAEA,UAAIH,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EAA6B;AACzB,cAAMC,KAAK,CAACH,IAAI,CAACI,OAAN,CAAX;AACH;;AACD,aAAOJ,IAAP;AACH,KApBuB;;AAAA,SAsBxBK,WAtBwB,GAsBV,MACd;AACI,WAAKZ,IAAL,CAAUa,QAAV;AACH,KAzBuB;AAAA;;AAKxBC,EAAAA,iBAAiB,GAAG;AAChB;AACA,SAAKV,cAAL,GACKW,IADL,CACUC,GAAG,IAAI,KAAKC,QAAL,CAAc;AAAEd,MAAAA,IAAI,EAAEa,GAAG,CAACE;AAAZ,KAAd,CADjB,EAEKC,KAFL,CAEWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAFlB;AAGH,GAVuB,CAWxB;;;AAgBAG,EAAAA,MAAM,GAAG;AACL;AAEA,WACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAI,MAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,CADJ,EAOI;AAAG,MAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0B,KAAKrB,KAAL,CAAWC,IAArC,CAPJ,EASI,oBAAC,IAAD;AAAM,MAAA,QAAQ,EAAE,CAAhB;AAAmB,MAAA,KAAK,EAAEqB,GAAG,IAAK,KAAKxB,IAAL,GAAYwB,GAA9C;AAAoD,MAAA,OAAO,EAAE,KAAKZ,WAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATJ,EAWI,oBAAC,IAAD;AAAM,MAAA,QAAQ,EAAE,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXJ,CADJ;AAeH;;AA7CuB;;AAgD5B,eAAeX,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport User from './User.js';\nimport Login from './Login.js';\nimport './App.css'\nimport './Color.css'\nimport Chat from './Chat.js'\n\n\n\nclass App extends Component {\n    state = {\n        data: null\n    };\n\n    componentDidMount() {\n        // Call our fetch function below once the component mounts\n        this.callBackendAPI()\n            .then(res => this.setState({ data: res.express }))\n            .catch(err => console.log(err));\n    }\n    // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n    callBackendAPI = async () => {\n        const response = await fetch('/express_backend');\n        const body = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(body.message)\n        }\n        return body;\n    };\n\n    refreshChat = () =>\n    {\n        this.Chat.loadChat();\n    }\n\n    render() {\n        //<Login />\n\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h1 className=\"App-title\">Date-a-base</h1>\n                </header>\n\n\n\n                <p className=\"App-intro\">{this.state.data}</p>\n\n                <Chat myUserId={1} onRef={ref => (this.Chat = ref)} refresh={this.refreshChat} />\n\n                <User myUserId={1} />\n            </div>\n    );\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}