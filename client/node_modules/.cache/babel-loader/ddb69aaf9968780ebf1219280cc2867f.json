{"ast":null,"code":"var _jsxFileName = \"C:\\\\d\\\\date-a-base\\\\client\\\\src\\\\Login.js\";\nimport React, { Component } from 'react'; //import { Link } from 'react-router-dom';\n\nimport { Button, FormGroup, FormControl } from \"react-bootstrap\";\nimport \"./Login.css\"; // import logo from './logo.svg';\n// import './App.css';\n\nimport User from './User.js';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n\n      try {\n        this.userLogin(); // this.props.history.push(\"/user\");\n      } catch (e) {\n        alert(e.message);\n      }\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.id]: event.target.value\n      });\n    };\n\n    this.userLogin = async () => {\n      var userLoginName = this.state.loginName;\n      var userPassword = this.state.password;\n      const response = await fetch('/login', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          loginName: userLoginName,\n          password: userPassword\n        })\n      }); // let Router = window.ReactRouter;\n      // let RouteHandler = Router.RouteHandler;\n      // let Route = Router.Route;\n      // let DefaultRoute = Router.DefaultRoute;\n      // let hashHistory = Router.hashHistory;\n\n      if (response.status !== 200) {\n        //throw Error(body.message)\n        if (response.status == 404) {\n          alert(\"LoginName does not exist\");\n        } else if (response.status == 400) {\n          alert(\"LoginName and password do not match\");\n        }\n      } else {\n        console.log(\"Successfully logged in\");\n        const response_json = await response.json();\n        console.log(response_json);\n        const userId = response_json.userId;\n        const username = response_json.username;\n        this.props.userHasAuthenticated(true, userId, username);\n        this.props.history.push(\"/\"); // User.setState({\n        //   loginName: userLoginName\n        // });\n        // hashHistory.push('/user')\n      } //return body;\n\n    };\n\n    this.state = {\n      loginName: \"\",\n      password: \"\"\n    };\n  }\n\n  validateForm() {\n    return this.state.loginName.length > 0 && this.state.password.length > 0;\n  }\n\n  handleAlternate(event) {\n    event.preventDefault();\n    console.log('on click user registration'); // this.props.history.push('/register');\n    //  try{\n    //    this.userRegistration()\n    //  } catch (e) {\n    //   alert(e.message);\n    // }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      controlId: \"loginName\",\n      bsSize: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"LoginName\"), React.createElement(FormControl, {\n      autoFocus: true,\n      type: \"loginName\",\n      value: this.state.loginName,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      controlId: \"password\",\n      bsSize: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Password\"), React.createElement(FormControl, {\n      value: this.state.password,\n      onChange: this.handleChange,\n      type: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    })), React.createElement(Button, {\n      block: true,\n      bsSize: \"large\",\n      disabled: !this.validateForm(),\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Login\")));\n  }\n\n}\n\nexport default Login;","map":{"version":3,"sources":["C:\\d\\date-a-base\\client\\src\\Login.js"],"names":["React","Component","Button","FormGroup","FormControl","User","Login","constructor","props","handleSubmit","event","preventDefault","userLogin","e","alert","message","handleChange","setState","target","id","value","userLoginName","state","loginName","userPassword","password","response","fetch","method","headers","body","JSON","stringify","status","console","log","response_json","json","userId","username","userHasAuthenticated","history","push","validateForm","length","handleAlternate","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\n//import { Link } from 'react-router-dom';\r\nimport { Button, FormGroup, FormControl} from \"react-bootstrap\";\r\nimport \"./Login.css\";\r\n// import logo from './logo.svg';\r\n// import './App.css';\r\nimport User from './User.js';\r\n\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      loginName: \"\",\r\n      password: \"\"\r\n    };\r\n\r\n  }\r\n\r\n  validateForm() {\r\n    return this.state.loginName.length > 0 && this.state.password.length > 0;\r\n  }\r\n\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    try{\r\n      this.userLogin();\r\n      // this.props.history.push(\"/user\");\r\n    } catch (e) {\r\n     alert(e.message);\r\n   }\r\n\r\n  }\r\n\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.id]: event.target.value\r\n    });\r\n  }\r\n\r\n  handleAlternate(event) {\r\n    event.preventDefault();\r\n    console.log('on click user registration');\r\n    // this.props.history.push('/register');\r\n   //  try{\r\n   //    this.userRegistration()\r\n   //  } catch (e) {\r\n   //   alert(e.message);\r\n   // }\r\n\r\n  }\r\n\r\n  userLogin = async () => {\r\n    var userLoginName = this.state.loginName;\r\n    var userPassword = this.state.password;\r\n\r\n    const response = await fetch('/login', {\r\n      method: 'POST',\r\n      headers: {\r\n       'Accept': 'application/json',\r\n       'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        loginName: userLoginName,\r\n        password: userPassword,\r\n      })\r\n    });\r\n\r\n    // let Router = window.ReactRouter;\r\n    // let RouteHandler = Router.RouteHandler;\r\n    // let Route = Router.Route;\r\n    // let DefaultRoute = Router.DefaultRoute;\r\n    // let hashHistory = Router.hashHistory;\r\n\r\n    if (response.status !== 200) {\r\n        //throw Error(body.message)\r\n      if (response.status == 404) {\r\n          alert(\"LoginName does not exist\");\r\n      }  else if (response.status == 400){\r\n         alert(\"LoginName and password do not match\");\r\n      }\r\n    } else {\r\n      console.log(\"Successfully logged in\");\r\n      const response_json = await response.json();\r\n      console.log(response_json);\r\n      const userId = response_json.userId;\r\n      const username = response_json.username;\r\n      this.props.userHasAuthenticated(true, userId, username);\r\n      this.props.history.push(\"/\");\r\n      // User.setState({\r\n      //   loginName: userLoginName\r\n      // });\r\n      // hashHistory.push('/user')\r\n    }\r\n\r\n    //return body;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Login\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <FormGroup controlId=\"loginName\" bsSize=\"large\">\r\n            <label>LoginName</label>\r\n            <FormControl\r\n              autoFocus\r\n              type=\"loginName\"\r\n              value={this.state.loginName}\r\n              onChange={this.handleChange}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup controlId=\"password\" bsSize=\"large\">\r\n            <label>Password</label>\r\n            <FormControl\r\n              value={this.state.password}\r\n              onChange={this.handleChange}\r\n              type=\"password\"\r\n            />\r\n          </FormGroup>\r\n          <Button\r\n            block\r\n            bsSize=\"large\"\r\n            disabled={!this.validateForm()}\r\n            type=\"submit\"\r\n          >\r\n            Login\r\n          </Button>\r\n          {/*<Button*/}\r\n          {/*    block*/}\r\n          {/*    bsSize=\"large\"*/}\r\n          {/*    onClick={this.handleAlternate.bind(this)}*/}\r\n          {/*>*/}\r\n          {/*  Register*/}\r\n          {/*</Button>*/}\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Login;\r\n"]},"metadata":{},"sourceType":"module"}