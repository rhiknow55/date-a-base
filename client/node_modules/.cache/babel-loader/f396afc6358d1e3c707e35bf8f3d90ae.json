{"ast":null,"code":"var _jsxFileName = \"/Users/Azio/Documents/GitHub/date-a-base/client/src/Chat.js\";\nimport React, { Component } from 'react';\nimport MessageList from './MessageList.js';\nimport SendMessageForm from './SendMessageForm.js';\nimport RoomList from './RoomList.js';\nimport './Chat.css';\n\nclass Chat extends React.Component {\n  constructor() {\n    super();\n\n    this.retrieveMessages = async () => {\n      let url = '/retrieve_messages?userId=' + this.props.myUserId + '&roomId=' + this.state.room; //console.log(url)\n\n      const response = await fetch(url);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.messages);\n      }\n\n      return json;\n    };\n\n    this.retrievePH = async () => {\n      let url = '/retrieve_pH?userId=' + this.props.myUserId;\n      const response = await fetch(url);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.messages);\n      }\n\n      console.log(\"weoraofksdojaodsjo\");\n      return json;\n    };\n\n    this.retrieveRoomIds = async () => {\n      let url = '/retrieve_roomIds?userId=' + this.props.myUserId;\n      const response = await fetch(url);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.messages);\n      }\n\n      return json;\n    };\n\n    this.addMessage = function (chatmessageid) {\n      this.postMsg(chatmessageid).then(this.setState({\n        message: \"\"\n      }));\n    };\n\n    this.postMsg = async chatmessageid => {\n      let url = '/post_message'; //console.log(\"============\")\n      //console.log(this.props.myUserId)\n      //console.log(this.state.roomIds[0].sessionId)\n      //console.log(this.state.number)\n      //console.log(JSON.stringify({chatMessageId: chatmessageid, message: this.state.text, chatSessionId: this.state.roomIds[0].sessionId, userId: this.props.myUserId}))\n\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          chatMessageId: chatmessageid,\n          message: this.state.text,\n          chatSessionId: this.state.room,\n          userId: this.props.myUserId\n        })\n      });\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      return json;\n    };\n\n    this.state = {\n      messages: [],\n      text: '',\n      roomIds: [],\n      number: 0,\n      room: null,\n      PH: 0\n    };\n    this.sendMessage = this.sendMessage.bind(this);\n    this.subscribeToRoom = this.subscribeToRoom.bind(this);\n    this.loadChat = this.loadChat.bind(this);\n  }\n\n  componentDidMount() {\n    // Load the feed contents\n    this.retrieveRoomIds().then(res => this.setState({\n      // messages: res.postIds\n      roomIds: res.roomIds\n    }));\n  } // need to retrieve messages\n\n\n  subscribeToRoom(roomId) {\n    this.retrieveMessages().then(res => this.setState({\n      // messages: res.postIds\n      messages: res.messages,\n      number: res.number,\n      room: roomId\n    }));\n  }\n\n  sendMessage(text) {\n    this.setState({\n      text: text\n    }, () => {\n      this.postMessage(this.state.text);\n      this.loadChat();\n    });\n  }\n\n  postMessage(text) {\n    //console.log(this.props.myUserId)\n    //console.log(this.state.roomIds[0])\n    //console.log(this.state.number)\n    let chatmessageid = this.props.myUserId.toString() + this.state.room.toString() + (this.state.number + 1).toString();\n    this.addMessage(chatmessageid);\n  } // Actually sending an API call to post comment to database\n\n\n  loadChat() {\n    // Load the chat for this post\n    this.retrieveMessages().then(res => this.setState({\n      // messages: res.postIds\n      messages: res.messages,\n      number: res.number\n    })); // this.retrievePH()\n    //     .then(res => this.setState( {\n    //         // messages: res.postIds\n    //         PH: res.PH,\n    //     }));\n  }\n\n  render() {\n    //if (this.state.roomIds[0] == undefined) {} else {console.log(this.state.roomIds[0].sessionId)}\n    //            text: '',\n    //roomIds: [],\n    //   number: 0\n    //console.log(\"============\")\n    console.log(this.state.messages.length);\n    return React.createElement(\"div\", {\n      className: \"Chat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"Double Click to Join Chat\"), React.createElement(RoomList, {\n      rooms: this.state.roomIds,\n      subscribeToRoom: this.subscribeToRoom,\n      loadChat: this.loadChat,\n      roomId: this.state.room,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }), React.createElement(MessageList, {\n      messages: this.state.messages,\n      myUserId: this.props.myUserId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }), React.createElement(SendMessageForm, {\n      sendMessage: this.sendMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/Azio/Documents/GitHub/date-a-base/client/src/Chat.js"],"names":["React","Component","MessageList","SendMessageForm","RoomList","Chat","constructor","retrieveMessages","url","props","myUserId","state","room","response","fetch","json","status","Error","messages","retrievePH","console","log","retrieveRoomIds","addMessage","chatmessageid","postMsg","then","setState","message","method","headers","body","JSON","stringify","chatMessageId","text","chatSessionId","userId","roomIds","number","PH","sendMessage","bind","subscribeToRoom","loadChat","componentDidMount","res","roomId","postMessage","toString","render","length"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport MessageList from './MessageList.js';\nimport SendMessageForm from './SendMessageForm.js'\nimport RoomList from './RoomList.js'\nimport './Chat.css';\n\n\n\n\n\nclass Chat extends React.Component {\n\n\n\n    constructor() {\n        super()\n        this.state = {\n            messages: [],\n            text: '',\n            roomIds: [],\n            number: 0,\n            room: null,\n            PH: 0\n        }\n\n        this.sendMessage = this.sendMessage.bind(this)\n        this.subscribeToRoom = this.subscribeToRoom.bind(this)\n        this.loadChat = this.loadChat.bind(this)\n\n\n\n    }\n\n    componentDidMount() {\n        // Load the feed contents\n\n        this.retrieveRoomIds()\n            .then(res => this.setState({\n                // messages: res.postIds\n                roomIds: res.roomIds\n\n            }));\n\n\n    }\n\n\n\n\n    // need to retrieve messages\n    retrieveMessages = async () => {\n        let url = '/retrieve_messages?userId=' + this.props.myUserId + '&roomId=' + this.state.room;\n        //console.log(url)\n        const response = await fetch(url)\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.messages)\n        }\n\n\n        return json;\n    }\n\n\n    retrievePH = async () => {\n        let url = '/retrieve_pH?userId=' + this.props.myUserId;\n        const response = await fetch(url)\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.messages)\n        }\n\n        console.log(\"weoraofksdojaodsjo\")\n        return json;\n    }\n\n    retrieveRoomIds = async () => {\n        let url = '/retrieve_roomIds?userId=' + this.props.myUserId;\n        const response = await fetch(url)\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.messages)\n        }\n\n\n        return json;\n    }\n\n    subscribeToRoom(roomId)\n    {\n        this.retrieveMessages()\n            .then(res => this.setState({\n                // messages: res.postIds\n                messages: res.messages,\n                number: res.number,\n                room: roomId\n            }));\n\n\n    }\n\n    sendMessage(text)\n    {\n        this.setState({text: text}, () => {\n            this.postMessage(this.state.text)\n            this.loadChat()\n        });\n\n    }\n\n\n    postMessage(text)\n    {\n        //console.log(this.props.myUserId)\n        //console.log(this.state.roomIds[0])\n        //console.log(this.state.number)\n        let chatmessageid = this.props.myUserId.toString() + this.state.room.toString() + (this.state.number+1).toString();\n        this.addMessage(chatmessageid);\n    }\n\n    // Actually sending an API call to post comment to database\n    addMessage = function(chatmessageid){\n        this.postMsg(chatmessageid)\n            .then(\n                this.setState({message: \"\"})\n            );\n    }\n\n    postMsg = async (chatmessageid) =>\n    {\n        let url = '/post_message';\n        //console.log(\"============\")\n        //console.log(this.props.myUserId)\n        //console.log(this.state.roomIds[0].sessionId)\n        //console.log(this.state.number)\n        //console.log(JSON.stringify({chatMessageId: chatmessageid, message: this.state.text, chatSessionId: this.state.roomIds[0].sessionId, userId: this.props.myUserId}))\n        const response = await fetch(url,\n            {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({chatMessageId: chatmessageid, message: this.state.text, chatSessionId: this.state.room, userId: this.props.myUserId})\n            });\n\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n\n        return json;\n    }\n\n\n    loadChat() {\n        // Load the chat for this post\n        this.retrieveMessages()\n            .then(res => this.setState( {\n                // messages: res.postIds\n                messages: res.messages,\n                number: res.number,\n            }));\n\n       // this.retrievePH()\n       //     .then(res => this.setState( {\n       //         // messages: res.postIds\n       //         PH: res.PH,\n       //     }));\n    }\n\n\n\n\n    render() {\n        //if (this.state.roomIds[0] == undefined) {} else {console.log(this.state.roomIds[0].sessionId)}\n        //            text: '',\n        //roomIds: [],\n         //   number: 0\n        //console.log(\"============\")\n        console.log(this.state.messages.length)\n\n        return (\n        <div className=\"Chat\">\n            <h3>Double Click to Join Chat</h3>\n            <RoomList rooms={this.state.roomIds} subscribeToRoom={this.subscribeToRoom} loadChat={this.loadChat} roomId={this.state.room} />\n            <MessageList messages={this.state.messages} myUserId={this.props.myUserId}/>\n            <SendMessageForm  sendMessage={this.sendMessage} />\n            </div>\n    )\n    }\n}\n\nexport default Chat"]},"metadata":{},"sourceType":"module"}