{"ast":null,"code":"var _jsxFileName = \"/Users/Azio/Documents/GitHub/date-a-base/client/src/Chat.js\";\nimport React, { Component } from 'react';\nimport MessageList from './MessageList.js';\nimport SendMessageForm from './SendMessageForm.js';\nconst DUMMY_DATA = [{\n  senderId: 'user1',\n  text: 'Hey, how is it going?'\n}, {\n  senderId: 'user2',\n  text: 'Great! How about you?'\n}, {\n  senderId: 'user1',\n  text: 'Good to hear! I am great as well'\n}];\n\nclass Chat extends React.Component {\n  constructor() {\n    super();\n\n    this.retrieveMessages = async () => {\n      let url = '/retrieve_messages?userId=' + this.props.myUserId;\n      const response = await fetch(url);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.messages);\n      }\n\n      return json;\n    };\n\n    this.retrieveRoomIds = async () => {\n      let url = '/retrieve_roomIds?userId=' + this.props.myUserId;\n      const response = await fetch(url);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.messages);\n      }\n\n      return json;\n    };\n\n    this.addMessage = function (chatmessageid) {\n      this.postMsg(chatmessageid).then(this.setState({\n        message: \"\"\n      }));\n    };\n\n    this.postMsg = async chatmessageid => {\n      let url = '/post_message';\n      console.log(\"============\");\n      console.log(this.props.myUserId);\n      console.log(this.state.roomIds[0]);\n      console.log(this.state.number);\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          chatMessageId: chatmessageid,\n          message: this.state.text,\n          chatSessionId: this.state.roomId[0].sessionId,\n          userId: this.props.myUserId\n        })\n      });\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      return json;\n    };\n\n    this.state = {\n      messages: [],\n      text: '',\n      roomIds: [],\n      number: 0\n    };\n    this.sendMessage = this.sendMessage.bind(this);\n  }\n\n  componentDidMount() {\n    // Load the feed contents\n    this.retrieveMessages().then(res => this.setState({\n      // messages: res.postIds\n      messages: res.messages,\n      number: res.number\n    }));\n    this.retrieveRoomIds().then(res => this.setState({\n      // messages: res.postIds\n      roomIds: res.roomIds\n    }));\n  } // need to retrieve messages\n\n\n  sendMessage(text) {\n    this.setState({\n      // messages: res.postIds\n      text: text\n    }); //console.log(this.state)\n\n    this.postMessage(this.state.text);\n  }\n\n  postMessage(text) {\n    console.log(this.props.myUserId);\n    console.log(this.state.roomIds[0]);\n    console.log(this.state.number);\n    let chatmessageid = this.props.myUserId.toString() + this.state.roomIds[0].sessionId.toString() + this.state.number.toString();\n    this.addMessage(chatmessageid);\n  } // Actually sending an API call to post comment to database\n\n\n  loadChat() {\n    // Load the chat for this post\n    this.retrieveMessages().then(res => this.setState({\n      // messages: res.postIds\n      messages: res.messages,\n      number: res.number\n    }));\n  }\n\n  render() {\n    //if (this.state.roomIds[0] == undefined) {} else {console.log(this.state.roomIds[0].sessionId)}\n    //            text: '',\n    //roomIds: [],\n    //   number: 0\n    return React.createElement(\"div\", {\n      className: \"Chat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(MessageList, {\n      messages: this.state.messages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }), React.createElement(SendMessageForm, {\n      sendMessage: this.sendMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/Azio/Documents/GitHub/date-a-base/client/src/Chat.js"],"names":["React","Component","MessageList","SendMessageForm","DUMMY_DATA","senderId","text","Chat","constructor","retrieveMessages","url","props","myUserId","response","fetch","json","status","Error","messages","retrieveRoomIds","addMessage","chatmessageid","postMsg","then","setState","message","console","log","state","roomIds","number","method","headers","body","JSON","stringify","chatMessageId","chatSessionId","roomId","sessionId","userId","sendMessage","bind","componentDidMount","res","postMessage","toString","loadChat","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport MessageList from './MessageList.js';\nimport SendMessageForm from './SendMessageForm.js'\n\n\nconst DUMMY_DATA = [\n    {\n        senderId: 'user1',\n        text: 'Hey, how is it going?'\n    },\n    {\n        senderId: 'user2',\n        text: 'Great! How about you?'\n    },\n    {\n        senderId: 'user1',\n        text: 'Good to hear! I am great as well'\n    }\n]\n\n\n\nclass Chat extends React.Component {\n\n\n\n    constructor() {\n        super()\n        this.state = {\n            messages: [],\n            text: '',\n            roomIds: [],\n            number: 0\n        }\n\n        this.sendMessage = this.sendMessage.bind(this)\n\n    }\n\n    componentDidMount() {\n        // Load the feed contents\n        this.retrieveMessages()\n            .then(res => this.setState( {\n               // messages: res.postIds\n                messages: res.messages,\n                number: res.number\n            }));\n\n        this.retrieveRoomIds()\n            .then(res => this.setState( {\n                // messages: res.postIds\n                roomIds: res.roomIds\n\n            }));\n\n\n    }\n\n\n\n\n    // need to retrieve messages\n    retrieveMessages = async () => {\n        let url = '/retrieve_messages?userId=' + this.props.myUserId;\n        const response = await fetch(url)\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.messages)\n        }\n\n\n        return json;\n    }\n\n    retrieveRoomIds = async () => {\n        let url = '/retrieve_roomIds?userId=' + this.props.myUserId;\n        const response = await fetch(url)\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.messages)\n        }\n\n\n        return json;\n    }\n\n\n\n    sendMessage(text) {\n        this.setState( {\n            // messages: res.postIds\n            text: text\n        })\n        //console.log(this.state)\n        this.postMessage(this.state.text)\n\n    }\n\n\n    postMessage(text)\n    {\n        console.log(this.props.myUserId)\n        console.log(this.state.roomIds[0])\n        console.log(this.state.number)\n        let chatmessageid = this.props.myUserId.toString() + this.state.roomIds[0].sessionId.toString() + this.state.number.toString();\n        this.addMessage(chatmessageid);\n    }\n\n    // Actually sending an API call to post comment to database\n    addMessage = function(chatmessageid){\n        this.postMsg(chatmessageid)\n            .then(\n                this.setState({message: \"\"})\n            );\n    }\n\n    postMsg = async (chatmessageid) =>\n    {\n        let url = '/post_message';\n        console.log(\"============\")\n        console.log(this.props.myUserId)\n        console.log(this.state.roomIds[0])\n        console.log(this.state.number)\n        const response = await fetch(url,\n            {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({chatMessageId: chatmessageid, message: this.state.text, chatSessionId: this.state.roomId[0].sessionId, userId: this.props.myUserId})\n            });\n\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n\n        return json;\n    }\n\n\n    loadChat() {\n        // Load the chat for this post\n        this.retrieveMessages()\n            .then(res => this.setState( {\n                // messages: res.postIds\n                messages: res.messages,\n                number: res.number\n            }));\n    }\n\n\n\n    render() {\n        //if (this.state.roomIds[0] == undefined) {} else {console.log(this.state.roomIds[0].sessionId)}\n        //            text: '',\n        //roomIds: [],\n         //   number: 0\n        return (\n        <div className=\"Chat\">\n            <MessageList messages={this.state.messages} />\n            <SendMessageForm  sendMessage={this.sendMessage} />\n            </div>\n\n    )\n    }\n}\n\nexport default Chat"]},"metadata":{},"sourceType":"module"}