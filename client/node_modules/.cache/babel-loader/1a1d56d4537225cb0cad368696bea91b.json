{"ast":null,"code":"var _jsxFileName = \"/Users/Rhino/date-a-base/client/src/Comment.js\";\nimport React, { Component } from 'react';\nimport './Post.css';\nexport class CommentSection extends Component {\n  constructor(props) {\n    super(props);\n\n    this.retrieveFeed = async () => {\n      let url = '/retrieve_comments?postId=' + this.props.postId;\n      const response = await fetch(url);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      return json;\n    };\n\n    this.renderComments = () => {\n      let comments = []; // Add the posts\n\n      let commentIds = this.state.commentIds;\n\n      for (let i = 0; i < commentIds.length; ++i) {\n        comments.push(React.createElement(CommentBox, {\n          comment: commentIds[i],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }));\n      }\n\n      return comments;\n    };\n\n    this.state = {\n      hasComments: false,\n      postId: this.props.postId,\n      commentIds: []\n    };\n  }\n\n  componentDidMount() {\n    // Load the comments for this post\n    this.retrieveFeed().then(res => this.setState({\n      hasComments: true,\n      commentIds: res.commentIds\n    }));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"CommentSection-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"CommentSection\", this.renderComments());\n  }\n\n}\nexport class AddComment extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      postId: this.props.postId\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"AddComment-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    });\n  }\n\n}\nexport class CommentBox extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getDateTime = function (mysqlTime) {\n      console.log(mysqlTime); // Split timestamp into [ Y, M, D, h, m, s ]\n\n      var t = mysqlTime.split(/[- T : .]/); // Apply each element to the Date function\n\n      var d = new Date(Date.UTC(t[0], t[1] - 1, t[2], t[3], t[4], t[5]));\n      console.log(d);\n      return d;\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Comment-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Comment \", this.getDateTime(this.props.comment.timeStamp).toDateString(), \" \", this.getDateTime(this.props.comment.timeStamp).toTimeString()), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), this.props.comment.message, this.props.comment.userId);\n  }\n\n}","map":{"version":3,"sources":["/Users/Rhino/date-a-base/client/src/Comment.js"],"names":["React","Component","CommentSection","constructor","props","retrieveFeed","url","postId","response","fetch","json","status","Error","message","renderComments","comments","commentIds","state","i","length","push","hasComments","componentDidMount","then","res","setState","render","AddComment","CommentBox","getDateTime","mysqlTime","console","log","t","split","d","Date","UTC","comment","timeStamp","toDateString","toTimeString","userId"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './Post.css';\n\nexport class CommentSection extends Component {\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            hasComments: false,\n            postId: this.props.postId,\n            commentIds: []\n        }\n    }\n\n    componentDidMount() {\n        // Load the comments for this post\n        this.retrieveFeed()\n            .then(res =>\n            this.setState({\n                hasComments: true,\n                commentIds: res.commentIds\n            }));\n    }\n\n    retrieveFeed = async () => {\n        let url = '/retrieve_comments?postId=' + this.props.postId;\n        const response = await fetch(url)\n\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n        return json;\n    }\n\n    renderComments = () =>\n    {\n        let comments = [];\n\n        // Add the posts\n        let commentIds = this.state.commentIds;\n        for (let i = 0; i < commentIds.length; ++i)\n        {\n            comments.push(<CommentBox comment = {commentIds[i]}/>);\n        }\n\n        return comments;\n    }\n\n    render()\n    {\n        return(\n            <div className=\"CommentSection-container\">\n                CommentSection\n                {this.renderComments()}\n            </div>\n        );\n    }\n}\n\nexport class AddComment extends Component {\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            postId: this.props.postId,\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"AddComment-container\">\n\n            </div>\n        );\n    }\n}\n\nexport class CommentBox extends Component {\n    getDateTime = function(mysqlTime)\n    {\n        console.log(mysqlTime);\n        // Split timestamp into [ Y, M, D, h, m, s ]\n        var t = mysqlTime.split(/[- T : .]/);\n\n\n        // Apply each element to the Date function\n        var d = new Date(Date.UTC(t[0], t[1]-1, t[2], t[3], t[4], t[5]));\n\n        console.log(d);\n\n        return d;\n    }\n\n    render() {\n        return (\n            <div className='Comment-container'>\n                <p>Comment {this.getDateTime(this.props.comment.timeStamp).toDateString()} {this.getDateTime(this.props.comment.timeStamp).toTimeString()}</p>\n                <p></p>\n                {this.props.comment.message}\n                {this.props.comment.userId}\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}