{"ast":null,"code":"var _jsxFileName = \"/Users/Rhino/date-a-base/client/src/Feed.js\";\nimport React, { Component } from 'react';\nimport Post, { AddPost } from \"./Post\";\nimport './Feed.css';\nconst NUMBER_OF_POSTS_TO_LOAD = 10;\n\nclass Feed extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      postIds: []\n    };\n\n    this.retrieveFeed = async () => {\n      let url = '/retrieve_posts?numberOfPosts=' + NUMBER_OF_POSTS_TO_LOAD;\n      const response = await fetch(url);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      return json;\n    };\n\n    this.renderPosts = () => {\n      let posts = [];\n      console.log(\"renderposts\"); // Add the posts\n\n      let postIds = this.state.postIds;\n\n      for (let i = 0; i < postIds.length; ++i) {\n        console.log(\"postId: \" + postIds[i].postid);\n        posts.push(React.createElement(Post, {\n          key: postIds[i].postid,\n          postId: postIds[i].postid,\n          myUserId: this.props.myUserId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }));\n      }\n\n      return posts;\n    };\n\n    this.refreshFeed = () => {\n      this.loadFeed();\n      console.log(\"refreshFeed\");\n    };\n  }\n\n  componentDidMount() {\n    this.loadFeed();\n  }\n\n  loadFeed() {\n    // Load the feed contents\n    this.retrieveFeed().then(res => {\n      this.setState({\n        postIds: res.postIds\n      });\n      console.log(\"feed ret\");\n      this.forceUpdate();\n    });\n  }\n\n  render() {\n    console.log(\"render\");\n    return (// TODO: Make a box that contains the posts\n      React.createElement(\"div\", {\n        className: \"Feed-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Feed Start\"), React.createElement(AddPost, {\n        myUserId: this.props.myUserId,\n        refresh: this.refreshFeed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }), this.renderPosts())\n    );\n  }\n\n}\n\nexport default Feed;","map":{"version":3,"sources":["/Users/Rhino/date-a-base/client/src/Feed.js"],"names":["React","Component","Post","AddPost","NUMBER_OF_POSTS_TO_LOAD","Feed","state","postIds","retrieveFeed","url","response","fetch","json","status","Error","message","renderPosts","posts","console","log","i","length","postid","push","props","myUserId","refreshFeed","loadFeed","componentDidMount","then","res","setState","forceUpdate","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,IAAcC,OAAd,QAA4B,QAA5B;AACA,OAAO,YAAP;AAEA,MAAMC,uBAAuB,GAAG,EAAhC;;AAEA,MAAMC,IAAN,SAAmBJ,SAAnB,CAA6B;AAAA;AAAA;AAAA,SACzBK,KADyB,GACjB;AACJC,MAAAA,OAAO,EAAE;AADL,KADiB;;AAAA,SAmBzBC,YAnByB,GAmBV,YAAY;AACvB,UAAIC,GAAG,GAAG,mCAAmCL,uBAA7C;AACA,YAAMM,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B;AAEA,YAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAT,EAAnB;;AAEA,UAAIF,QAAQ,CAACG,MAAT,KAAoB,GAAxB,EAA6B;AACzB,cAAMC,KAAK,CAACF,IAAI,CAACG,OAAN,CAAX;AACH;;AACD,aAAOH,IAAP;AACH,KA7BwB;;AAAA,SAgCzBI,WAhCyB,GAgCX,MACd;AACI,UAAIC,KAAK,GAAG,EAAZ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAFJ,CAII;;AACA,UAAIZ,OAAO,GAAG,KAAKD,KAAL,CAAWC,OAAzB;;AACA,WAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,OAAO,CAACc,MAA5B,EAAoC,EAAED,CAAtC,EACA;AACIF,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAaZ,OAAO,CAACa,CAAD,CAAP,CAAWE,MAApC;AACAL,QAAAA,KAAK,CAACM,IAAN,CAAW,oBAAC,IAAD;AAAM,UAAA,GAAG,EAAEhB,OAAO,CAACa,CAAD,CAAP,CAAWE,MAAtB;AAA8B,UAAA,MAAM,EAAIf,OAAO,CAACa,CAAD,CAAP,CAAWE,MAAnD;AAA2D,UAAA,QAAQ,EAAE,KAAKE,KAAL,CAAWC,QAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAX;AACH;;AAED,aAAOR,KAAP;AACH,KA9CwB;;AAAA,SAiDzBS,WAjDyB,GAiDX,MACd;AACI,WAAKC,QAAL;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACH,KArDwB;AAAA;;AAKzBS,EAAAA,iBAAiB,GAAG;AAChB,SAAKD,QAAL;AACH;;AAEDA,EAAAA,QAAQ,GACR;AACI;AACA,SAAKnB,YAAL,GACKqB,IADL,CACUC,GAAG,IAAI;AAAC,WAAKC,QAAL,CAAe;AAC7BxB,QAAAA,OAAO,EAAEuB,GAAG,CAACvB;AADgB,OAAf;AAEdW,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AAAyB,WAAKa,WAAL;AAAqB,KAHlD;AAKH;;AAsCDC,EAAAA,MAAM,GAAG;AACLf,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,WACI;AACA;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,EAEI,oBAAC,OAAD;AAAS,QAAA,QAAQ,EAAE,KAAKK,KAAL,CAAWC,QAA9B;AAAwC,QAAA,OAAO,EAAE,KAAKC,WAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGK,KAAKV,WAAL,EAHL;AAFJ;AAQH;;AAjEwB;;AAqE7B,eAAeX,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport Post, {AddPost} from \"./Post\";\nimport './Feed.css'\n\nconst NUMBER_OF_POSTS_TO_LOAD = 10;\n\nclass Feed extends Component {\n    state = {\n        postIds: []\n    };\n\n    componentDidMount() {\n        this.loadFeed();\n    }\n\n    loadFeed()\n    {\n        // Load the feed contents\n        this.retrieveFeed()\n            .then(res => {this.setState( {\n            postIds: res.postIds\n        }); console.log(\"feed ret\"); this.forceUpdate(); }\n    );\n    }\n\n    retrieveFeed = async () => {\n        let url = '/retrieve_posts?numberOfPosts=' + NUMBER_OF_POSTS_TO_LOAD;\n        const response = await fetch(url)\n\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n        return json;\n    }\n\n    // Translates this.state.postIds into legible React Post objects\n    renderPosts = () =>\n    {\n        let posts = [];\n        console.log(\"renderposts\");\n\n        // Add the posts\n        let postIds = this.state.postIds;\n        for (let i = 0; i < postIds.length; ++i)\n        {\n            console.log(\"postId: \" + postIds[i].postid)\n            posts.push(<Post key={postIds[i].postid} postId = {postIds[i].postid} myUserId={this.props.myUserId}/>);\n        }\n\n        return posts;\n    }\n\n    // Refresh the comment section. Callback for when you add a comment\n    refreshFeed = () =>\n    {\n        this.loadFeed();\n        console.log(\"refreshFeed\");\n    }\n\n    render() {\n        console.log(\"render\");\n        return (\n            // TODO: Make a box that contains the posts\n            <div className='Feed-container'>\n                <p>Feed Start</p>\n                <AddPost myUserId={this.props.myUserId} refresh={this.refreshFeed} />\n                {this.renderPosts()}\n            </div>\n        );\n    }\n}\n\n\nexport default Feed;"]},"metadata":{},"sourceType":"module"}