{"ast":null,"code":"var _jsxFileName = \"/Users/Rhino/date-a-base/client/src/Feed.js\";\nimport React, { Component } from 'react';\nimport Post from \"./Post\";\nconst NUMBER_OF_POSTS_TO_LOAD = 10;\n\nclass Feed extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      postIds: null\n    };\n\n    this.retrieveFeed = async () => {\n      const response = await fetch('/postIds', {\n        method: 'POST',\n        headers: new Headers({\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }),\n        body: JSON.stringify({\n          numberOfPosts: NUMBER_OF_POSTS_TO_LOAD\n        })\n      });\n      console.log(response); // const json = await response.json();\n      //\n      // if (response.status !== 200) {\n      //     throw Error(json.message)\n      // }\n\n      return response;\n    };\n\n    this.loadPosts = () => {\n      let posts = []; // Add the posts\n\n      for (let i = 0; i < NUMBER_OF_POSTS_TO_LOAD; ++i) {\n        // TODO: Get the recent posts via timestamp from express\n        posts.push(React.createElement(Post, {\n          postName: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }));\n      }\n\n      return posts;\n    };\n  }\n\n  componentDidMount() {\n    // Load the feed contents\n    this.retrieveFeed().then(res => this.setState({\n      postIds: res.postIds\n    }));\n  }\n\n  render() {\n    return (// TODO: Make a box that contains the posts\n      React.createElement(\"div\", {\n        className: \"User\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Feed Start\"), \"//Has some stuff like filter, then the scrollable layout with posts\", this.loadPosts())\n    );\n  }\n\n}\n\nexport default Feed;","map":{"version":3,"sources":["/Users/Rhino/date-a-base/client/src/Feed.js"],"names":["React","Component","Post","NUMBER_OF_POSTS_TO_LOAD","Feed","state","postIds","retrieveFeed","response","fetch","method","headers","Headers","body","JSON","stringify","numberOfPosts","console","log","loadPosts","posts","i","push","componentDidMount","then","res","setState","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,MAAMC,uBAAuB,GAAG,EAAhC;;AAEA,MAAMC,IAAN,SAAmBH,SAAnB,CAA6B;AAAA;AAAA;AAAA,SACzBI,KADyB,GACjB;AACJC,MAAAA,OAAO,EAAE;AADL,KADiB;;AAAA,SAazBC,YAbyB,GAaV,YAAY;AACvB,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,UAAD,EAAa;AACrCC,QAAAA,MAAM,EAAE,MAD6B;AAErCC,QAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AACjB,oBAAU,kBADO;AAEjB,0BAAgB;AAFC,SAAZ,CAF4B;AAMrCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,UAAAA,aAAa,EAAEb;AADE,SAAf;AAN+B,OAAb,CAA5B;AAWAc,MAAAA,OAAO,CAACC,GAAR,CAAYV,QAAZ,EAZuB,CAavB;AACA;AACA;AACA;AACA;;AACA,aAAOA,QAAP;AACH,KAhCwB;;AAAA,SAkCzBW,SAlCyB,GAkCb,MACZ;AACI,UAAIC,KAAK,GAAG,EAAZ,CADJ,CAGI;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlB,uBAApB,EAA6C,EAAEkB,CAA/C,EACA;AACI;AACAD,QAAAA,KAAK,CAACE,IAAN,CAAW,oBAAC,IAAD;AAAM,UAAA,QAAQ,EAAID,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAX;AACH;;AAED,aAAOD,KAAP;AACH,KA9CwB;AAAA;;AAKzBG,EAAAA,iBAAiB,GAAG;AAChB;AACA,SAAKhB,YAAL,GACKiB,IADL,CACUC,GAAG,IAAI,KAAKC,QAAL,CAAe;AACxBpB,MAAAA,OAAO,EAAEmB,GAAG,CAACnB;AADW,KAAf,CADjB;AAIH;;AAqCDqB,EAAAA,MAAM,GAAG;AACL,WACI;AACA;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,yEAIK,KAAKR,SAAL,EAJL;AAFJ;AASH;;AA1DwB;;AA8D7B,eAAef,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport Post from \"./Post\";\n\nconst NUMBER_OF_POSTS_TO_LOAD = 10;\n\nclass Feed extends Component {\n    state = {\n        postIds: null\n    };\n\n    componentDidMount() {\n        // Load the feed contents\n        this.retrieveFeed()\n            .then(res => this.setState( {\n                postIds: res.postIds\n            }));\n    }\n\n    retrieveFeed = async () => {\n        const response = await fetch('/postIds', {\n            method: 'POST',\n            headers: new Headers({\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }),\n            body: JSON.stringify({\n                numberOfPosts: NUMBER_OF_POSTS_TO_LOAD\n            })\n        })\n\n        console.log(response)\n        // const json = await response.json();\n        //\n        // if (response.status !== 200) {\n        //     throw Error(json.message)\n        // }\n        return response;\n    }\n\n    loadPosts = () =>\n    {\n        let posts = [];\n\n        // Add the posts\n        for (let i = 0; i < NUMBER_OF_POSTS_TO_LOAD; ++i)\n        {\n            // TODO: Get the recent posts via timestamp from express\n            posts.push(<Post postName = {i}/>);\n        }\n\n        return posts;\n    }\n\n    render() {\n        return (\n            // TODO: Make a box that contains the posts\n            <div className=\"User\">\n                <p>Feed Start</p>\n                //Has some stuff like filter, then the scrollable layout with posts\n\n                {this.loadPosts()}\n            </div>\n        );\n    }\n}\n\n\nexport default Feed;"]},"metadata":{},"sourceType":"module"}