{"ast":null,"code":"var _jsxFileName = \"/Users/Rhino/date-a-base/client/src/Post.js\";\nimport React, { Component } from 'react';\nimport { CommentSection, AddComment, CommentBox } from './Comment.js';\nimport './Post.css';\n\nclass Post extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getPost = async () => {\n      let url = '/get_post?postId=' + this.state.postId;\n      const response = await fetch(url);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      return json;\n    };\n\n    this.getUserData = function () {\n      this.retrieveUserData().then(res => this.setState({\n        user: {\n          username: res.username,\n          horoscope: res.horoscope,\n          log: res.log\n        }\n      }));\n    };\n\n    this.retrieveUserData = async () => {\n      const response = await fetch('/user_data?userId=' + this.state.userId);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      return json;\n    };\n\n    this.refreshCommentSection = () => {\n      this.commentSection.loadComments();\n    };\n\n    this.state = {\n      postId: this.props.postId,\n      message: null,\n      image: null,\n      userId: null,\n      user: {\n        username: null,\n        horoscope: null,\n        log: null\n      }\n    };\n  }\n\n  componentDidMount() {\n    // Load the feed contents\n    this.getPost().then(res => {\n      this.setState({\n        message: res.message,\n        image: res.image,\n        userId: res.userId\n      });\n      this.getUserData();\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Post-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Post = \", this.state.postId), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Username = \", this.state.user.username), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Message = \", this.state.message), React.createElement(CommentSection, {\n      onRef: ref => this.commentSection = ref,\n      postId: this.state.postId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(AddComment, {\n      postId: this.state.postId,\n      myUserId: this.props.myUserId,\n      refresh: this.refreshCommentSection,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport class AddPost extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getNumberOfComments = () => {\n      this.getCommentsOnPost().then(res => {\n        this.actuallySubmit(res.amount);\n      });\n    };\n\n    this.getCommentsOnPost = async () => {\n      const response = await fetch('/comments_made_on_post?postId=' + this.props.postId + '&userId=' + this.props.myUserId);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      return json;\n    };\n\n    this.addComment = function (commentId) {\n      this.postComment(commentId).then(this.props.refresh(), this.setState({\n        message: \"\"\n      }));\n    };\n\n    this.postComment = async commentId => {\n      let url = '/add_comment';\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          commentId: commentId,\n          message: this.state.message,\n          postId: this.props.postId,\n          userId: this.props.myUserId\n        })\n      });\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      return json;\n    };\n\n    this.state = {\n      message: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  } // Handling change of textbox\n\n\n  handleChange(event) {\n    this.setState({\n      message: event.target.value\n    });\n  } // Handling the click of the submit button. Will get the number of comments made by user on that post first\n\n\n  handleSubmit(event) {\n    // Post to database\n    this.getNumberOfComments(); // Prevent page from refreshing\n\n    event.preventDefault();\n  } // Get number of comments made by user so far\n\n\n  // This gets called once done getting number of comments\n  // It calls the actual method that adds the comment\n  actuallySubmit(commentAmount) {\n    let commentId = this.props.myUserId.toString() + '0' + this.props.postId.toString() + '0' + commentAmount.toString();\n    this.addComment(commentId);\n  } // Actually sending an API call to post comment to database\n\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"Comment:\", React.createElement(\"input\", {\n      class: true,\n      type: \"text\",\n      value: this.state.message,\n      placeholder: \"Your comment here...\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      className: \"Post-comment-button\",\n      type: \"submit\",\n      value: \"Submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }), React.createElement(\"textarea\", {\n      placeholder: \"Add post here...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }));\n  }\n\n}\nexport default Post;","map":{"version":3,"sources":["/Users/Rhino/date-a-base/client/src/Post.js"],"names":["React","Component","CommentSection","AddComment","CommentBox","Post","constructor","props","getPost","url","state","postId","response","fetch","json","status","Error","message","getUserData","retrieveUserData","then","res","setState","user","username","horoscope","log","userId","refreshCommentSection","commentSection","loadComments","image","componentDidMount","render","ref","myUserId","AddPost","getNumberOfComments","getCommentsOnPost","actuallySubmit","amount","addComment","commentId","postComment","refresh","method","headers","body","JSON","stringify","handleChange","bind","handleSubmit","event","target","value","preventDefault","commentAmount","toString"],"mappings":"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","sourcesContent":["import React, { Component }from 'react';\nimport { CommentSection, AddComment, CommentBox } from './Comment.js';\nimport './Post.css';\n\n\nclass Post extends Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            postId: this.props.postId,\n            message: null,\n            image: null,\n            userId: null,\n            user: {username: null, horoscope: null, log: null}\n        }\n    }\n\n    componentDidMount() {\n        // Load the feed contents\n        this.getPost()\n            .then(res => {\n            this.setState({\n                message: res.message,\n                image: res.image,\n                userId: res.userId\n            });\n\n            this.getUserData();\n        });\n    }\n\n    getPost = async () => {\n        let url = '/get_post?postId=' + this.state.postId;\n        const response = await fetch(url)\n\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n        return json;\n    }\n\n    getUserData = function()\n    {\n        this.retrieveUserData()\n            .then(res => this.setState( {\n            user: {username: res.username, horoscope: res.horoscope, log: res.log}\n        }));\n    }\n\n    retrieveUserData = async () => {\n        const response = await fetch('/user_data?userId=' + this.state.userId);\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n        return json;\n    }\n\n    // Refresh the comment section. Callback for when you add a comment\n    refreshCommentSection = () =>\n    {\n        this.commentSection.loadComments();\n    }\n\n    render() {\n        return (\n            <div className=\"Post-container\">\n                <p>Post = {this.state.postId}</p>\n                <p>Username = {this.state.user.username}</p>\n                <p>Message = {this.state.message}</p>\n\n                <CommentSection onRef={ref => (this.commentSection = ref)} postId={this.state.postId}/>\n                <AddComment postId={this.state.postId} myUserId={this.props.myUserId} refresh={this.refreshCommentSection}/>\n            </div>\n        );\n    }\n}\n\nexport class AddPost extends Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {message: \"\"};\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    // Handling change of textbox\n    handleChange(event) {\n        this.setState({message: event.target.value});\n    }\n\n    // Handling the click of the submit button. Will get the number of comments made by user on that post first\n    handleSubmit(event) {\n        // Post to database\n        this.getNumberOfComments();\n\n        // Prevent page from refreshing\n        event.preventDefault()\n    }\n\n    // Get number of comments made by user so far\n    getNumberOfComments = () =>\n    {\n        this.getCommentsOnPost()\n            .then(res => {\n                this.actuallySubmit(res.amount)\n            });\n    }\n\n    getCommentsOnPost = async () => {\n        const response = await fetch('/comments_made_on_post?postId=' + this.props.postId + '&userId=' + this.props.myUserId);\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n        return json;\n    }\n\n    // This gets called once done getting number of comments\n    // It calls the actual method that adds the comment\n    actuallySubmit(commentAmount)\n    {\n        let commentId = this.props.myUserId.toString() + '0' + this.props.postId.toString() + '0' + commentAmount.toString();\n        this.addComment(commentId);\n    }\n\n    // Actually sending an API call to post comment to database\n    addComment = function(commentId){\n        this.postComment(commentId)\n            .then(\n                this.props.refresh(),\n                this.setState({message: \"\"})\n            );\n    }\n\n    postComment = async (commentId) =>\n    {\n        let url = '/add_comment';\n        const response = await fetch(url,\n        {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({commentId: commentId, message: this.state.message, postId: this.props.postId, userId: this.props.myUserId})\n        });\n\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n\n        return json;\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <label>\n                    Comment:\n                    <input class type=\"text\" value={this.state.message} placeholder=\"Your comment here...\" onChange={this.handleChange} />\n                </label>\n                    <input className=\"Post-comment-button\" type=\"submit\" value=\"Submit\"/>\n                    <textarea placeholder=\"Add post here...\" />\n            </form>\n        );\n    }\n}\n\n\nexport default Post;"]},"metadata":{},"sourceType":"module"}