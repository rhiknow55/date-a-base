{"ast":null,"code":"var _jsxFileName = \"/Users/Rhino/date-a-base/client/src/User.js\";\nimport React, { Component } from 'react';\n\nclass User extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      username: null,\n      horoscope: null,\n      log: 0\n    };\n\n    this.retrieveUserData = async () => {\n      const response = await fetch('/userdata');\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      return body;\n    };\n  }\n\n  componentDidMount() {\n    // Load the user data\n    this.retrieveUserData().then(res => this.setState({\n      username: res.username,\n      horoscope: res.horoscope,\n      log: res.log\n    }));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"User\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"User-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"User-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"Welcome to React\")), \"// Render the newly fetched data inside of this.state.data\", React.createElement(\"p\", {\n      className: \"User-username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, this.state.username), React.createElement(\"p\", {\n      className: \"User-horoscope\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, this.state.horoscope), React.createElement(\"p\", {\n      className: \"User-log\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, this.state.log));\n  }\n\n}\n\nexport default User;","map":{"version":3,"sources":["/Users/Rhino/date-a-base/client/src/User.js"],"names":["React","Component","User","state","username","horoscope","log","retrieveUserData","response","fetch","body","json","status","Error","message","componentDidMount","then","res","setState","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,IAAN,SAAmBD,SAAnB,CAA6B;AAAA;AAAA;AAAA,SACzBE,KADyB,GACjB;AACJC,MAAAA,QAAQ,EAAE,IADN;AAEJC,MAAAA,SAAS,EAAE,IAFP;AAGJC,MAAAA,GAAG,EAAE;AAHD,KADiB;;AAAA,SAiBzBC,gBAjByB,GAiBN,YAAY;AAC3B,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,WAAD,CAA5B;AACA,YAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;;AAEA,UAAIH,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EAA6B;AACzB,cAAMC,KAAK,CAACH,IAAI,CAACI,OAAN,CAAX;AACH;;AACD,aAAOJ,IAAP;AACH,KAzBwB;AAAA;;AAOzBK,EAAAA,iBAAiB,GAAG;AAChB;AACA,SAAKR,gBAAL,GACKS,IADL,CACUC,GAAG,IAAI,KAAKC,QAAL,CAAe;AACxBd,MAAAA,QAAQ,EAAEa,GAAG,CAACb,QADU;AAExBC,MAAAA,SAAS,EAAEY,GAAG,CAACZ,SAFS;AAGxBC,MAAAA,GAAG,EAAEW,GAAG,CAACX;AAHe,KAAf,CADjB;AAMH;;AAYDa,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,SAAS,EAAC,aAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,CADJ,gEAKI;AAAG,MAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8B,KAAKhB,KAAL,CAAWC,QAAzC,CALJ,EAMI;AAAG,MAAA,SAAS,EAAC,gBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA+B,KAAKD,KAAL,CAAWE,SAA1C,CANJ,EAOI;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyB,KAAKF,KAAL,CAAWG,GAApC,CAPJ,CADJ;AAWH;;AAvCwB;;AA0C7B,eAAeJ,IAAf","sourcesContent":["import React, { Component } from 'react';\n\nclass User extends Component {\n    state = {\n        username: null,\n        horoscope: null,\n        log: 0\n    };\n\n    componentDidMount() {\n        // Load the user data\n        this.retrieveUserData()\n            .then(res => this.setState( {\n                username: res.username,\n                horoscope: res.horoscope,\n                log: res.log\n            }));\n    }\n\n    retrieveUserData = async () => {\n        const response = await fetch('/userdata');\n        const body = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(body.message)\n        }\n        return body;\n    }\n\n    render() {\n        return (\n            <div className=\"User\">\n                <header className=\"User-header\">\n                    <h1 className=\"User-title\">Welcome to React</h1>\n                </header>\n                // Render the newly fetched data inside of this.state.data\n                <p className=\"User-username\">{this.state.username}</p>\n                <p className=\"User-horoscope\">{this.state.horoscope}</p>\n                <p className=\"User-log\">{this.state.log}</p>\n            </div>\n        );\n    }\n}\n\nexport default User;"]},"metadata":{},"sourceType":"module"}