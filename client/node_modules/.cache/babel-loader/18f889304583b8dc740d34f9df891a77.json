{"ast":null,"code":"var _jsxFileName = \"/Users/Rhino/date-a-base/client/src/Profile.js\";\nimport React, { Component } from 'react';\nimport \"./Profile.css\";\nimport ElectricBass from './images/electricBass.png';\nimport ChemicalBase from './images/chemicalBase.png';\nimport Baseball from './images/baseball.png';\nimport Trophy from \"./Trophy.js\";\nimport { Button, FormControl, FormGroup, NavItem } from \"react-bootstrap\";\nimport { LinkContainer } from \"react-router-bootstrap\";\n\nclass Profile extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      trophyIds: [],\n      hasAllTrophies: false,\n      newUserName: \"\",\n      userName: \"user name in state\",\n      isTakingQuestions: false,\n      questions: []\n    };\n\n    this.retrieveTrophy = async () => {\n      // console.log('get api is called');\n      // console.log(\"user id: \" + this.props.myUserId);\n      let url = '/get_trophies?userId=' + this.props.myUserId;\n      const response = await fetch(url);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      console.log(json);\n      return json;\n    };\n\n    this.renderTrofiess = () => {\n      let trophies = []; // Add the trophies\n\n      let trophyIds = this.state.trophyIds;\n\n      for (let i = 0; i < trophyIds.length; ++i) {\n        trophies.push(React.createElement(Trophy, {\n          trophyId: trophyIds[i].trophyId,\n          myUserId: this.props.myUserId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }));\n      }\n\n      return trophies;\n    };\n\n    this.hasAllTrophies = async () => {\n      console.log('hasAllTrophies is called');\n      console.log(\"user id: \" + this.props.myUserId);\n      let url = '/has_all_trophies';\n      const response = await fetch(url);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      console.log(json);\n      return json;\n    };\n\n    this.renderHasAllTrofies = () => {\n      let hasAllTrophies = this.state.hasAllTrophies;\n      console.log(hasAllTrophies);\n\n      if (hasAllTrophies) {\n        return React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        }, \"you have all the trophies!\");\n      }\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.id]: event.target.value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n\n      try {\n        this.updateUserName(); // this.props.history.push(\"/user\");\n      } catch (e) {\n        alert(e.message);\n      }\n    };\n\n    this.retrieveQuestions = async () => {\n      console.log('get questions api is called');\n      let url = '/get_questions';\n      const response = await fetch(url);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      console.log(json);\n      return json;\n    };\n\n    this.updateUserName = async () => {\n      console.log('update user name');\n      console.log(this.state.newUserName); // var newUserName = this.state.newUserName;\n      // var userId = this.props.myUserId;\n\n      console.log('current user id:'); // let url = '/update_user_name?newUserName=' + this.state.newUserName + '&userId=' + this.props.myUserId;\n\n      const response = await fetch('/update_user_name', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          newUserName: this.state.newUserName,\n          userId: this.props.myUserId\n        })\n      });\n\n      if (response.status !== 200) {\n        //throw Error(body.message)\n        console.log('user name update failed');\n      } else {\n        console.log(\"Successfully updated, current user name is updated to:\");\n        console.log(this.state.userName); // const response_json = await response.json();\n        // console.log(response_json);\n        // const userId = response_json.userId;\n        // const username = response_json.username;\n        // console.log(`userID: ${userId}`)\n        // this.props.userHasAuthenticated(true, userId, username);\n        // this.props.history.push(\"/\");\n      }\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"call componentDidMount\"); // Load the trophies\n\n    this.retrieveTrophy().then(res => {\n      console.log(res.trophyIds);\n      console.log(typeof res.trophyIds);\n      this.setState({\n        trophyIds: res.trophyIds\n      });\n    });\n    this.hasAllTrophies().then(res => {\n      console.log('get all user ids that has all trophies');\n      let allTrophiesUserIds = res.userIds;\n\n      for (let i = 0; i < allTrophiesUserIds.length; i++) {\n        if (this.props.myUserId == allTrophiesUserIds[i].userId) {\n          console.log('you have all the trophies!');\n          this.setState({\n            hasAllTrophies: true\n          });\n        }\n      }\n\n      console.log(this.state.hasAllTrophies);\n    });\n    this.retrieveQuestions().then(res => {\n      console.log(res.questions); // console.log(typeof res.trophyIds);\n\n      this.setState({\n        questions: res.questions\n      });\n    });\n  }\n\n  renderBaseLogo(baseId) {\n    switch (baseId) {\n      case 1:\n        return React.createElement(\"img\", {\n          src: ElectricBass,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        });\n\n      case 2:\n        return React.createElement(\"img\", {\n          src: ChemicalBase,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        });\n\n      case 3:\n        return React.createElement(\"img\", {\n          src: Baseball,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        });\n\n      case 4:\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, \"Log base\");\n\n      case 5:\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, \"Bass Fish\");\n        ;\n\n      default:\n        return null;\n    }\n  }\n\n  validateForm() {\n    return this.state.newUserName.length > 0;\n  }\n\n  handleAlternate(event) {\n    event.preventDefault();\n    console.log('on click taking sorting hat questions');\n    this.setState({\n      isTakingQuestions: true\n    });\n    console.log(this.state.isTakingQuestions);\n  }\n\n  renderQuestions() {\n    console.log(\"render questions:\");\n    console.log(this.state.questions);\n    let questionContents = []; // Add the questions\n\n    let questions = this.state.questions;\n\n    for (let i = 0; i < questions.length; ++i) {\n      questionContents.push(React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, \"Question \", i, \":  \", questions[i].question));\n    }\n\n    return questionContents;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Profile-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, \"My Profile\"), this.renderBaseLogo(this.props.baseId), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, \"BaseId: \", this.props.baseId), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, \"Username: \", this.props.username), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      controlId: \"newUserName\",\n      bsSize: \"small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(FormControl, {\n      autoFocus: true,\n      type: \"newUserName\",\n      value: this.state.newUserName,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    })), React.createElement(Button // block\n    , {\n      bsSize: \"small\",\n      disabled: !this.validateForm(),\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, \"Update My User Name\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, \"Points: \", this.props.log), this.renderHasAllTrofies(), this.renderTrofiess(), React.createElement(Button // block\n    , {\n      bsSize: \"small\",\n      onClick: this.handleAlternate.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, \"View sorting hat questions\"), this.state.isTakingQuestions ? this.renderQuestions() : null);\n  }\n\n}\n\nexport default Profile;","map":{"version":3,"sources":["/Users/Rhino/date-a-base/client/src/Profile.js"],"names":["React","Component","ElectricBass","ChemicalBase","Baseball","Trophy","Button","FormControl","FormGroup","NavItem","LinkContainer","Profile","state","trophyIds","hasAllTrophies","newUserName","userName","isTakingQuestions","questions","retrieveTrophy","url","props","myUserId","response","fetch","json","status","Error","message","console","log","renderTrofiess","trophies","i","length","push","trophyId","renderHasAllTrofies","handleChange","event","setState","target","id","value","handleSubmit","preventDefault","updateUserName","e","alert","retrieveQuestions","method","headers","body","JSON","stringify","userId","componentDidMount","then","res","allTrophiesUserIds","userIds","renderBaseLogo","baseId","validateForm","handleAlternate","renderQuestions","questionContents","question","render","username","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport \"./Profile.css\";\nimport ElectricBass from './images/electricBass.png';\nimport ChemicalBase from './images/chemicalBase.png';\nimport Baseball from './images/baseball.png';\nimport Trophy from \"./Trophy.js\";\nimport {Button, FormControl, FormGroup, NavItem} from \"react-bootstrap\";\nimport {LinkContainer} from \"react-router-bootstrap\";\n\n\nclass Profile extends Component\n{\n    state = {\n        trophyIds: [],\n        hasAllTrophies: false,\n        newUserName: \"\",\n        userName: \"user name in state\",\n        isTakingQuestions: false,\n        questions: []\n    };\n\n    componentDidMount() {\n        console.log(\"call componentDidMount\")\n        // Load the trophies\n        this.retrieveTrophy()\n            .then(res => {\n                console.log(res.trophyIds);\n                console.log(typeof res.trophyIds);\n                this.setState( {\n\n                trophyIds: res.trophyIds\n                });\n            });\n        this.hasAllTrophies()\n            .then(res => {\n                console.log('get all user ids that has all trophies');\n\n                let allTrophiesUserIds = res.userIds;\n                for (let i = 0; i < allTrophiesUserIds.length; i++)\n                {\n                    if (this.props.myUserId == allTrophiesUserIds[i].userId){\n                        console.log('you have all the trophies!')\n                        this.setState( {\n                            hasAllTrophies: true\n                        });\n                    }\n                }\n                console.log(this.state.hasAllTrophies);\n            });\n\n        this.retrieveQuestions()\n            .then(res => {\n                console.log(res.questions);\n                // console.log(typeof res.trophyIds);\n                this.setState( {\n\n                questions: res.questions\n                });\n            });\n    }\n\n    retrieveTrophy = async () => {\n        // console.log('get api is called');\n        // console.log(\"user id: \" + this.props.myUserId);\n        let url = '/get_trophies?userId=' + this.props.myUserId;\n        const response = await fetch(url)\n\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n        console.log(json);\n        return json;\n    }\n\n    renderTrofiess = () =>\n    {\n        let trophies = [];\n\n        // Add the trophies\n        let trophyIds = this.state.trophyIds;\n        for (let i = 0; i < trophyIds.length; ++i)\n        {\n            trophies.push(<Trophy trophyId = {trophyIds[i].trophyId} myUserId={this.props.myUserId}/>);\n        }\n        return trophies;\n    }\n\n    renderBaseLogo(baseId)\n    {\n        switch(baseId) {\n            case 1:\n              return <img src={ElectricBass} />;\n            case 2:\n              return <img src={ChemicalBase} />;\n            case 3:\n              return <img src={Baseball} />;\n            case 4:\n              return <p>Log base</p>;\n            case 5:\n              return <p>Bass Fish</p>;;\n            default:\n              return null;\n        }\n    }\n\n    hasAllTrophies = async () => {\n        console.log('hasAllTrophies is called');\n        console.log(\"user id: \" + this.props.myUserId);\n        let url = '/has_all_trophies';\n        const response = await fetch(url)\n\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n        console.log(json);\n        return json;\n    }\n\n    renderHasAllTrofies = () =>\n    {\n        let hasAllTrophies = this.state.hasAllTrophies;\n        console.log(hasAllTrophies);\n        if (hasAllTrophies) {\n            return <h3>you have all the trophies!</h3>;\n        }\n\n    }\n\n    validateForm() {\n        return this.state.newUserName.length > 0;\n      }\n\n    handleChange = event => {\n        this.setState({\n          [event.target.id]: event.target.value\n        });\n      }\n\n    handleSubmit = event => {\n        event.preventDefault();\n\n        try{\n          this.updateUserName();\n          // this.props.history.push(\"/user\");\n        } catch (e) {\n         alert(e.message);\n       }\n      }\n\n\n     handleAlternate(event) {\n        event.preventDefault();\n        console.log('on click taking sorting hat questions');\n        this.setState({\n              isTakingQuestions: true\n            });\n        console.log(this.state.isTakingQuestions);\n\n      }\n\n\n      renderQuestions() {\n        console.log(\"render questions:\");\n        console.log(this.state.questions);\n\n        let questionContents = [];\n\n        // Add the questions\n        let questions = this.state.questions;\n        for (let i = 0; i < questions.length; ++i)\n        {\n            questionContents.push(<p>Question {i}:  {questions[i].question}</p>);\n        }\n        return questionContents;\n      }\n\n      retrieveQuestions = async () => {\n        console.log('get questions api is called');\n        let url = '/get_questions';\n        const response = await fetch(url)\n\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n        console.log(json);\n        return json;\n    }\n\n     updateUserName = async () => {\n        console.log('update user name');\n        console.log(this.state.newUserName);\n        // var newUserName = this.state.newUserName;\n        // var userId = this.props.myUserId;\n        console.log('current user id:');\n        // let url = '/update_user_name?newUserName=' + this.state.newUserName + '&userId=' + this.props.myUserId;\n\n        const response = await fetch('/update_user_name', {\n          method: 'POST',\n          headers: {\n           'Accept': 'application/json',\n           'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            newUserName: this.state.newUserName,\n            userId: this.props.myUserId,\n          })\n        });\n\n        if (response.status !== 200) {\n            //throw Error(body.message)\n            console.log('user name update failed')\n        } else {\n          console.log(\"Successfully updated, current user name is updated to:\");\n          console.log(this.state.userName);\n          // const response_json = await response.json();\n          // console.log(response_json);\n          // const userId = response_json.userId;\n          // const username = response_json.username;\n          // console.log(`userID: ${userId}`)\n          // this.props.userHasAuthenticated(true, userId, username);\n          // this.props.history.push(\"/\");\n\n        }\n\n     }\n\n    render() {\n        return (\n            <div className='Profile-container'>\n                <h2>My Profile</h2>\n                {this.renderBaseLogo(this.props.baseId)}\n                <p>BaseId: {this.props.baseId}</p>\n                <p>Username: {this.props.username}</p>\n\n\n                <form onSubmit={this.handleSubmit}>\n                  <FormGroup controlId=\"newUserName\" bsSize=\"small\">\n                    {/*<label></label>*/}\n                    <FormControl\n                      autoFocus\n                      type=\"newUserName\"\n                      value={this.state.newUserName}\n                      onChange={this.handleChange}\n                    />\n                  </FormGroup>\n                  <Button\n                    // block\n                    bsSize=\"small\"\n                    disabled={!this.validateForm()}\n                    type=\"submit\"\n                  >\n                    Update My User Name\n                  </Button>\n                </form>\n\n                {/*<p>Horoscope: {this.props.horoscope}</p>*/}\n                <p>Points: {this.props.log}</p>\n                {this.renderHasAllTrofies()}\n                {this.renderTrofiess()}\n                <Button\n                    // block\n                    bsSize=\"small\"\n                    onClick={this.handleAlternate.bind(this)}\n                  >\n                    View sorting hat questions\n                  </Button>\n                  { this.state.isTakingQuestions\n                    ? this.renderQuestions()\n                    : null\n                  }\n            </div>\n        );\n    }\n}\n\n\nexport default Profile;"]},"metadata":{},"sourceType":"module"}