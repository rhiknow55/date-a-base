{"ast":null,"code":"var _jsxFileName = \"/Users/Rhino/date-a-base/client/src/Comment.js\";\nimport React, { Component } from 'react';\nimport './Post.css';\nexport class CommentSection extends Component {\n  constructor(props) {\n    super(props);\n\n    this.retrieveFeed = async () => {\n      let url = '/retrieve_comments?postId=' + this.props.postId;\n      const response = await fetch(url);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      return json;\n    };\n\n    this.renderComments = () => {\n      let comments = []; // Add the posts\n\n      let commentIds = this.state.commentIds;\n\n      for (let i = 0; i < commentIds.length; ++i) {\n        comments.push(React.createElement(CommentBox, {\n          comment: commentIds[i],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }));\n      }\n\n      return comments;\n    };\n\n    this.state = {\n      hasComments: false,\n      postId: this.props.postId,\n      commentIds: []\n    };\n  }\n\n  componentDidMount() {\n    // Load the comments for this post\n    this.retrieveFeed().then(res => this.setState({\n      hasComments: true,\n      commentIds: res.commentIds\n    }));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"CommentSection-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"CommentSection\", this.renderComments());\n  }\n\n}\nexport class AddComment extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addComment = function (commentId) {\n      this.postComment(commentId).then(console.log(\"Comment added\"));\n    };\n\n    this.postComment = async commentId => {\n      let url = '/add_comment';\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          commentId: commentId,\n          message: this.state.message,\n          postId: this.props.postId,\n          userId: this.props.myUserId\n        })\n      });\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      return json;\n    };\n\n    this.getNumberOfComments = () => {\n      this.getCommentsOnPost().then(res => {\n        console.log(\"amount: \" + res.amount);\n        this.actuallySubmit(res.amount);\n      });\n    };\n\n    this.getCommentsOnPost = async () => {\n      const response = await fetch('/comments_made_on_post?postId=' + this.props.postId + '&userId=' + this.props.myUserId);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      return json;\n    };\n\n    this.state = {\n      message: \"Insert comment here\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      message: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    // Post to database\n    this.getNumberOfComments(); // Prevent page from refreshing\n\n    event.preventDefault();\n  }\n\n  actuallySubmit(commentAmount) {\n    let commentId = this.props.myUserId.toString() + this.props.postId.toString() + commentAmount.toString();\n    console.log(commentId);\n    this.addComment(commentId);\n  } // Get number of comments made by user so far\n\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Comment:\", React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.message,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }));\n  }\n\n}\nexport class CommentBox extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      user: {\n        username: null,\n        horoscope: null,\n        log: null\n      }\n    };\n\n    this.getDate = function (mysqlTime) {\n      // Split timestamp into [ Y, M, D, h, m, s ]\n      var t = mysqlTime.split(/[- T : .]/); // Apply each element to the Date function\n\n      var d = new Date(Date.UTC(t[0], t[1] - 1, t[2], t[3], t[4], t[5]));\n      return d;\n    };\n\n    this.timeSince = function (date) {\n      var seconds = Math.floor((new Date() - date) / 1000);\n      var interval = Math.floor(seconds / 31536000);\n\n      if (interval > 1) {\n        return interval + \" years\";\n      }\n\n      interval = Math.floor(seconds / 2592000);\n\n      if (interval > 1) {\n        return interval + \" months\";\n      }\n\n      interval = Math.floor(seconds / 86400);\n\n      if (interval > 1) {\n        return interval + \" days\";\n      }\n\n      interval = Math.floor(seconds / 3600);\n\n      if (interval > 1) {\n        return interval + \" hours\";\n      }\n\n      interval = Math.floor(seconds / 60);\n\n      if (interval > 1) {\n        return interval + \" minutes\";\n      }\n\n      return Math.floor(seconds) + \" seconds\";\n    };\n\n    this.retrieveUserData = async () => {\n      const response = await fetch('/user_data?userId=' + this.props.comment.userId);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      return json;\n    };\n  }\n\n  componentDidMount() {\n    this.retrieveUserData().then(res => this.setState({\n      user: {\n        username: res.username,\n        horoscope: res.horoscope,\n        log: res.log\n      }\n    }));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Comment-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, this.timeSince(this.getDate(this.props.comment.timeStamp)), \" ago\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, this.state.user.username), this.props.comment.message);\n  }\n\n}","map":{"version":3,"sources":["/Users/Rhino/date-a-base/client/src/Comment.js"],"names":["React","Component","CommentSection","constructor","props","retrieveFeed","url","postId","response","fetch","json","status","Error","message","renderComments","comments","commentIds","state","i","length","push","hasComments","componentDidMount","then","res","setState","render","AddComment","addComment","commentId","postComment","console","log","method","headers","body","JSON","stringify","userId","myUserId","getNumberOfComments","getCommentsOnPost","amount","actuallySubmit","handleChange","bind","handleSubmit","event","target","value","preventDefault","commentAmount","toString","CommentBox","user","username","horoscope","getDate","mysqlTime","t","split","d","Date","UTC","timeSince","date","seconds","Math","floor","interval","retrieveUserData","comment","timeStamp"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './Post.css';\n\nexport class CommentSection extends Component {\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            hasComments: false,\n            postId: this.props.postId,\n            commentIds: []\n        }\n    }\n\n    componentDidMount() {\n        // Load the comments for this post\n        this.retrieveFeed()\n            .then(res =>\n            this.setState({\n                hasComments: true,\n                commentIds: res.commentIds\n            }));\n    }\n\n    retrieveFeed = async () => {\n        let url = '/retrieve_comments?postId=' + this.props.postId;\n        const response = await fetch(url)\n\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n        return json;\n    }\n\n    renderComments = () =>\n    {\n        let comments = [];\n\n        // Add the posts\n        let commentIds = this.state.commentIds;\n        for (let i = 0; i < commentIds.length; ++i)\n        {\n            comments.push(<CommentBox comment = {commentIds[i]}/>);\n        }\n\n        return comments;\n    }\n\n    render()\n    {\n        return(\n            <div className=\"CommentSection-container\">\n                CommentSection\n                {this.renderComments()}\n            </div>\n        );\n    }\n}\n\nexport class AddComment extends Component {\n    constructor(props)\n    {\n        super(props);\n        this.state = {message: \"Insert comment here\"};\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    addComment = function(commentId){\n        this.postComment(commentId)\n            .then(\n                console.log(\"Comment added\")\n            );\n    }\n\n    postComment = async (commentId) =>\n    {\n        let url = '/add_comment';\n        const response = await fetch(url,\n         {\n             method: 'POST',\n             headers: {\n                 'Accept': 'application/json',\n                 'Content-Type': 'application/json'\n             },\n             body: JSON.stringify({commentId: commentId, message: this.state.message, postId: this.props.postId, userId: this.props.myUserId})\n         });\n\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n\n        return json;\n    }\n\n    handleChange(event) {\n        this.setState({message: event.target.value});\n    }\n\n    handleSubmit(event) {\n        // Post to database\n        this.getNumberOfComments();\n\n        // Prevent page from refreshing\n        event.preventDefault()\n    }\n\n    actuallySubmit(commentAmount)\n    {\n        let commentId = this.props.myUserId.toString() + this.props.postId.toString() + commentAmount.toString();\n        console.log(commentId);\n        this.addComment(commentId);\n    }\n\n    // Get number of comments made by user so far\n    getNumberOfComments = () =>\n    {\n        this.getCommentsOnPost()\n            .then(res => {\n                console.log(\"amount: \" + res.amount);\n                this.actuallySubmit(res.amount)});\n    }\n\n    getCommentsOnPost = async () => {\n        const response = await fetch('/comments_made_on_post?postId=' + this.props.postId + '&userId=' + this.props.myUserId);\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n        return json;\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <label>\n                    Comment:\n                    <input type=\"text\" value={this.state.message} onChange={this.handleChange} />\n                </label>\n                <input type=\"submit\" value=\"Submit\"/>\n            </form>\n        );\n    }\n}\n\nexport class CommentBox extends Component {\n    state = {\n        user: {username: null, horoscope: null, log: null}\n    }\n\n    componentDidMount() {\n        this.retrieveUserData()\n            .then(res => this.setState( {\n            user: {username: res.username, horoscope: res.horoscope, log: res.log}\n        }));\n    }\n\n    getDate = function(mysqlTime)\n    {\n        // Split timestamp into [ Y, M, D, h, m, s ]\n        var t = mysqlTime.split(/[- T : .]/);\n\n\n        // Apply each element to the Date function\n        var d = new Date(Date.UTC(t[0], t[1]-1, t[2], t[3], t[4], t[5]));\n\n        return d;\n    }\n\n    timeSince = function(date) {\n\n        var seconds = Math.floor((new Date() - date) / 1000);\n\n        var interval = Math.floor(seconds / 31536000);\n\n        if (interval > 1) {\n            return interval + \" years\";\n        }\n        interval = Math.floor(seconds / 2592000);\n        if (interval > 1) {\n            return interval + \" months\";\n        }\n        interval = Math.floor(seconds / 86400);\n        if (interval > 1) {\n            return interval + \" days\";\n        }\n        interval = Math.floor(seconds / 3600);\n        if (interval > 1) {\n            return interval + \" hours\";\n        }\n        interval = Math.floor(seconds / 60);\n        if (interval > 1) {\n            return interval + \" minutes\";\n        }\n        return Math.floor(seconds) + \" seconds\";\n    }\n\n    retrieveUserData = async () => {\n        const response = await fetch('/user_data?userId=' + this.props.comment.userId);\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n        return json;\n    }\n\n    render() {\n        return (\n            <div className='Comment-container'>\n                <p>{this.timeSince(this.getDate(this.props.comment.timeStamp))} ago</p>\n                <p></p>\n                <button>{this.state.user.username}</button>\n                {this.props.comment.message}\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}