{"ast":null,"code":"var _jsxFileName = \"/Users/Rhino/date-a-base/client/src/Post.js\";\nimport React, { Component } from 'react';\nimport { CommentSection, AddComment, CommentBox } from './Comment.js';\nimport './Post.css';\n\nclass Post extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getPostAsync = async () => {\n      console.log(\"postId on getPostAsynce : \" + this.props.postId);\n      let url = '/get_post?postId=' + this.props.postId;\n      const response = await fetch(url);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      console.log(this.state.postId);\n      console.log(json.message);\n      return json;\n    };\n\n    this.getUserData = function () {\n      this.retrieveUserData().then(res => this.setState({\n        user: {\n          username: res.username,\n          horoscope: res.horoscope,\n          log: res.log\n        }\n      }));\n    };\n\n    this.retrieveUserData = async () => {\n      const response = await fetch('/user_data?userId=' + this.props.myUserId);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      return json;\n    };\n\n    this.getLikedPost = function () {\n      this.retrieveLikedPost().then(res => this.setState({\n        liked: res.liked\n      }));\n    };\n\n    this.retrieveLikedPost = async () => {\n      const response = await fetch('/get_if_like?userId=' + this.props.myUserId + '&postId=' + this.state.postId);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      return json;\n    };\n\n    this.likePost = function () {\n      this.likePostAsync().then(this.setState({\n        liked: true\n      }));\n    };\n\n    this.likePostAsync = async commentId => {\n      let url = '/like_post';\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId: this.props.myUserId,\n          postId: this.state.postId\n        })\n      });\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      return json;\n    };\n\n    this.unlikePost = function () {\n      this.unlikePostAsync().then(this.setState({\n        liked: false\n      }));\n    };\n\n    this.unlikePostAsync = async commentId => {\n      let url = '/unlike_post';\n      const response = await fetch(url, {\n        method: 'DELETE',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId: this.props.myUserId,\n          postId: this.state.postId\n        })\n      });\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      return json;\n    };\n\n    this.refreshCommentSection = () => {\n      this.commentSection.loadComments();\n    };\n\n    this.state = {\n      postId: this.props.postId,\n      message: null,\n      image: null,\n      userId: null,\n      user: {\n        username: null,\n        horoscope: null,\n        log: null\n      },\n      liked: false\n    };\n    this.handleLike = this.handleLike.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    console.log(\"willreceive: \" + nextProps.postId);\n    this.setState({\n      postId: nextProps.postId\n    }, () => {\n      this.getPost();\n    });\n  }\n\n  componentDidMount() {\n    this.getPost();\n  }\n\n  getPost() {\n    // Load the feed contents\n    this.getPostAsync().then(res => {\n      this.setState({\n        message: res.message,\n        image: res.image,\n        userId: res.userId\n      });\n      console.log(\"message after getpost \" + this.state.message);\n      this.getUserData();\n      this.getLikedPost();\n    });\n  }\n\n  handleLike(event) {\n    if (this.state.liked) {\n      this.unlikePost();\n    } else {\n      this.likePost();\n    }\n\n    event.preventDefault();\n  } // Actually sending an API call to like post to database\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Post-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"Post = \", this.state.postId), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"Username = \", this.state.user.username), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"Message = \", this.state.message), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.handleLike,\n      className: \"Comment-user-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, this.state.liked ? 'Unlike' : 'Like'), React.createElement(CommentSection, {\n      onRef: ref => this.commentSection = ref,\n      postId: this.state.postId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), React.createElement(AddComment, {\n      postId: this.state.postId,\n      myUserId: this.props.myUserId,\n      refresh: this.refreshCommentSection,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport class AddPost extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getNumberOfPosts = () => {\n      this.getPostsMade().then(res => {\n        this.actuallySubmit(res.amount);\n      });\n    };\n\n    this.getPostsMade = async () => {\n      const response = await fetch('/posts_made_by_user?userId=' + this.props.myUserId);\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      return json;\n    };\n\n    this.addPost = function (postId) {\n      this.postPost(postId).then(this.props.refresh(), this.setState({\n        message: \"\"\n      }));\n    };\n\n    this.postPost = async postId => {\n      let url = '/add_post';\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          postId: postId,\n          message: this.state.message,\n          userId: this.props.myUserId\n        })\n      });\n      const json = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(json.message);\n      }\n\n      return json;\n    };\n\n    this.state = {\n      message: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  } // Handling change of textbox\n\n\n  handleChange(event) {\n    this.setState({\n      message: event.target.value\n    });\n  } // Handling the click of the submit button. Will get the number of posts made by user\n\n\n  handleSubmit(event) {\n    // Post to database\n    this.getNumberOfPosts(); // Prevent page from refreshing\n\n    event.preventDefault();\n  } // Get number of posts made by user so far\n\n\n  // This gets called once done getting number of comments\n  // It calls the actual method that adds the comment\n  actuallySubmit(postAmount) {\n    let postId = this.props.myUserId.toString() + '0' + postAmount.toString();\n    this.addPost(postId);\n  } // Actually sending an API call to post comment to database\n\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      className: \"form-control rounded-5\",\n      value: this.state.message,\n      onChange: this.handleChange,\n      id: \"exampleFormControlTextarea1\",\n      placeholder: \"What's on your mind?\",\n      rows: \"10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, \"\\xA0\"), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-primary mb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, \"Post\"), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, \"\\xA0\")));\n  }\n\n}\nexport default Post;","map":{"version":3,"sources":["/Users/Rhino/date-a-base/client/src/Post.js"],"names":["React","Component","CommentSection","AddComment","CommentBox","Post","constructor","props","getPostAsync","console","log","postId","url","response","fetch","json","status","Error","message","state","getUserData","retrieveUserData","then","res","setState","user","username","horoscope","myUserId","getLikedPost","retrieveLikedPost","liked","likePost","likePostAsync","commentId","method","headers","body","JSON","stringify","userId","unlikePost","unlikePostAsync","refreshCommentSection","commentSection","loadComments","image","handleLike","bind","componentWillReceiveProps","nextProps","nextContext","getPost","componentDidMount","event","preventDefault","render","ref","AddPost","getNumberOfPosts","getPostsMade","actuallySubmit","amount","addPost","postPost","refresh","handleChange","handleSubmit","target","value","postAmount","toString"],"mappings":"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","sourcesContent":["import React, { Component }from 'react';\nimport { CommentSection, AddComment, CommentBox } from './Comment.js';\nimport './Post.css';\n\n\nclass Post extends Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            postId: this.props.postId,\n            message: null,\n            image: null,\n            userId: null,\n            user: {username: null, horoscope: null, log: null},\n            liked: false\n        }\n\n        this.handleLike = this.handleLike.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        console.log(\"willreceive: \" + nextProps.postId)\n        this.setState({postId: nextProps.postId}, () => {\n            this.getPost()\n        })\n    }\n\n    componentDidMount() {\n        this.getPost();\n    }\n\n    getPost()\n    {\n        // Load the feed contents\n        this.getPostAsync()\n            .then(res => {\n            this.setState({\n                message: res.message,\n                image: res.image,\n                userId: res.userId\n            });\n            console.log(\"message after getpost \" + this.state.message)\n\n        this.getUserData();\n        this.getLikedPost();\n    });\n    }\n\n    getPostAsync = async () => {\n        console.log(\"postId on getPostAsynce : \" + this.props.postId)\n        let url = '/get_post?postId=' + this.props.postId;\n        const response = await fetch(url)\n\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n        console.log(this.state.postId);\n        console.log(json.message);\n        return json;\n    }\n\n    getUserData = function()\n    {\n        this.retrieveUserData()\n            .then(res => this.setState( {\n            user: {username: res.username, horoscope: res.horoscope, log: res.log}\n        }));\n    }\n\n    retrieveUserData = async () => {\n        const response = await fetch('/user_data?userId=' + this.props.myUserId);\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n        return json;\n    }\n\n    getLikedPost = function()\n    {\n        this.retrieveLikedPost()\n            .then(res => this.setState( {\n            liked: res.liked\n        }));\n    }\n\n    retrieveLikedPost = async () => {\n        const response = await fetch('/get_if_like?userId=' + this.props.myUserId + '&postId=' + this.state.postId);\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n        return json;\n    }\n\n    handleLike(event) {\n        if (this.state.liked)\n        {\n            this.unlikePost();\n        }\n        else\n        {\n            this.likePost();\n        }\n\n        event.preventDefault();\n    }\n\n    // Actually sending an API call to like post to database\n    likePost = function(){\n        this.likePostAsync()\n            .then(\n                this.setState({liked: true})\n            );\n    }\n\n    likePostAsync = async (commentId) =>\n    {\n        let url = '/like_post';\n        const response = await fetch(url,\n        {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({userId: this.props.myUserId, postId: this.state.postId})\n        });\n\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n\n        return json;\n    }\n\n    // Actually sending an API call to unlike post to database\n    unlikePost = function(){\n        this.unlikePostAsync()\n            .then(\n                this.setState({liked: false})\n            );\n    }\n\n    unlikePostAsync = async (commentId) =>\n    {\n        let url = '/unlike_post';\n        const response = await fetch(url,\n        {\n            method: 'DELETE',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({userId: this.props.myUserId, postId: this.state.postId})\n        });\n\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n\n        return json;\n    }\n\n    // Refresh the comment section. Callback for when you add a comment\n    refreshCommentSection = () =>\n    {\n        this.commentSection.loadComments();\n    }\n\n    render() {\n        return (\n            <div className=\"Post-container\">\n                <p>Post = {this.state.postId}</p>\n                <p>Username = {this.state.user.username}</p>\n                <p>Message = {this.state.message}</p>\n                <button type=\"button\" onClick={this.handleLike} className=\"Comment-user-button\">{this.state.liked ? 'Unlike' : 'Like'}</button>\n                <CommentSection onRef={ref => (this.commentSection = ref)} postId={this.state.postId}/>\n                <AddComment postId={this.state.postId} myUserId={this.props.myUserId} refresh={this.refreshCommentSection}/>\n            </div>\n        );\n    }\n}\n\nexport class AddPost extends Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {message: \"\"};\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    // Handling change of textbox\n    handleChange(event) {\n        this.setState({message: event.target.value});\n    }\n\n    // Handling the click of the submit button. Will get the number of posts made by user\n    handleSubmit(event) {\n        // Post to database\n        this.getNumberOfPosts();\n\n        // Prevent page from refreshing\n        event.preventDefault()\n    }\n\n    // Get number of posts made by user so far\n    getNumberOfPosts = () =>\n    {\n        this.getPostsMade()\n            .then(res => {\n                this.actuallySubmit(res.amount)\n            });\n    }\n\n    getPostsMade = async () => {\n        const response = await fetch('/posts_made_by_user?userId=' + this.props.myUserId);\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n        return json;\n    }\n\n    // This gets called once done getting number of comments\n    // It calls the actual method that adds the comment\n    actuallySubmit(postAmount)\n    {\n        let postId = this.props.myUserId.toString() + '0' + postAmount.toString();\n        this.addPost(postId);\n    }\n\n    // Actually sending an API call to post comment to database\n    addPost = function(postId){\n        this.postPost(postId)\n            .then(\n                this.props.refresh(),\n                this.setState({message: \"\"})\n            );\n    }\n\n    postPost = async (postId) =>\n    {\n        let url = '/add_post';\n        const response = await fetch(url,\n        {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({postId: postId, message: this.state.message, userId: this.props.myUserId})\n        });\n\n        const json = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(json.message)\n        }\n\n        return json;\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"form-group\">\n                    <textarea className=\"form-control rounded-5\" value={this.state.message} onChange={this.handleChange}\n                        id=\"exampleFormControlTextarea1\" placeholder=\"What's on your mind?\" rows=\"10\"></textarea>\n                    <span>&nbsp;</span>\n                    <button type=\"submit\" className=\"btn btn-primary mb-2\">Post</button>\n                    <span>&nbsp;</span>\n                </div>\n            </form>\n        );\n    }\n}\n\n\nexport default Post;"]},"metadata":{},"sourceType":"module"}